{"version":3,"file":"main.js","mappings":";;;;;;;;;;AAAA,yCAA6B;AAC7B,2CAA+B;AAC/B,sDAMuB;AACvB,sDAKuB;AACvB,oEAAqD;AACrD,wDAAyD;AACzD,sDAAuC;AACvC,0DAAoC;AAEpC,MAAM,EAAE,MAAM,EAAE,GAAG,oBAAW,CAAC;AAE/B,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,gBAAgB,CAAC,EAAE,iBAAO,CAAC,CAAC;AACtD,OAAO,CAAC,GAAG,CAAC,8BAA8B,GAAG,SAAS,CAAC,CAAC;AACxD,OAAO,CAAC,GAAG,CAAC,gCAAgC,GAAG,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC;AAI9D,IAAI,SAAc,CAAC;AACnB,IAAI,eAAoB,CAAC;AAEzB,IAAI,SAAS,CAAC,UAAU,CAAC,YAAY,CAAC,EAAE;IACvC,SAAS,GAAG,gCAAgC,CAAC;IAC7C,eAAe,GAAG,4BAA4B,CAAC;CAC/C;KAAM;IACN,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,WAAW,EAAE,GAAG,CAAC,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC;IACjG,eAAe,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,WAAW,EAAE,GAAG,CAAC,MAAM,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC;CAChG;AAED,OAAO,CAAC,GAAG,CAAC,8BAA8B,GAAG,SAAS,CAAC,CAAC;AACxD,OAAO,CAAC,GAAG,CAAC,oCAAoC,GAAG,eAAe,CAAC,CAAC;AACpE,OAAO,CAAC,GAAG,CAAC,kBAAkB,GAAG,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;AAEhD,oBAAY,GAA4B;IACpD,gBAAgB,EAAE;QACjB,IAAI,EAAE,OAAO,CAAC,GAAG,CAAC,QAAQ,IAAI,yBAAgB;QAC9C,IAAI,EAAE,OAAO,CAAC,GAAG,CAAC,QAAQ,IAAI,yBAAgB;QAC9C,OAAO,EAAE,OAAO,CAAC,GAAG,CAAC,YAAY,IAAI,6BAAoB;QACzD,UAAU,EAAE,EAAE;QACd,oBAAoB,EAAE;YACrB,IAAI,EAAE,iCAAwB;YAC9B,UAAU,EAAE,IAAI;YAChB,KAAK,EAAE,IAAI;YACX,mBAAmB,EAAE,EAAE;SACvB;KACD;IACD,mBAAmB,EAAE;QACpB,aAAa,EAAE,GAAG;QAClB,UAAU,EAAE,IAAI;QAChB,yBAAyB,EAAE,MAAM;QACjC,aAAa,EAAE,OAAO,CAAC,GAAG,CAAC,cAAc,KAAK,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI;QACnE,GAAG,kCAAyB;KAC5B;IACD,2BAA2B,EAAE;QAC5B,GAAG,mCAA0B;KAC7B;IACD,uBAAuB,EAAE;QACxB,aAAa,EAAE,GAAG;QAClB,UAAU,EAAE,IAAI;QAChB,GAAG,+BAAsB;KACzB;IACD,YAAY,EAAE;QACb,SAAS,EAAE,SAAS;QACpB,eAAe,EAAE,eAAe;KAChC;IACD,GAAG,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,MAAM,EAAE,IAAI,6BAAa,CAAC,sBAAY,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;IAC3E,OAAO,EAAP,iBAAO;CACP,CAAC;;;;;;;;;;;AC7EF,sDAA4C;AAC5C,0EAA0D;AAC1D,sFAAqE;AACrE,oFAAmE;AACnE,gFAA+D;AAC/D,4EAA2D;AAC3D,wDAAyD;AAEzD,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,oBAAW,CAAC;AAKzB,eAAO,GAAG;IAEnB,GAAG,CAAC,MAAM,IAAI,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,sBAAY,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;IAE/C,6CAAoB,CAAC,IAAI,CAAC;QACtB,MAAM,EAAE;YACJ,IAAI,EAAE,KAAK,CAAC,UAAU;YACtB,QAAQ,EAAE,KAAK,CAAC,cAAc;YAC9B,KAAK,EAAE,KAAK,CAAC,KAAK;YAClB,UAAU,EAAE,KAAK,CAAC,UAAU;SAC/B;KACJ,CAAC;IAEF,kCAAe;IAEf,2CAAmB;IAEnB,uCAAiB;IAEjB,mCAAe;CAClB,CAAC;;;;;;;;;;;ACjCF,sDAA4C;AAC5C,oEAA+E;AAC/E,sDAAqC;AAMrC,SAAgB,gBAAgB;IAC/B,IAAI,oBAAW,CAAC,MAAM,CAAC,GAAG,EAAE;QAC3B,OAAO,CAAC,GAAG,CAAC,+BAA+B,EAAE,oBAAW,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QAErE,OAAO,4BAAY,CAAC,IAAI,CAAC;YACxB,GAAG,EAAE,oBAAW,CAAC,MAAM,CAAC,GAAG;YAC3B,KAAK,EAAE,OAAO,CAAC,GAAG,CAAC,YAAY,KAAK,MAAM,IAAI,CAAC,oBAAW,CAAC,UAAU;YACrE,WAAW,EAAE,oBAAW,CAAC,UAAU,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,aAAa;YAClE,OAAO,EAAE,QAAQ,GAAG,iBAAO;YAC3B,SAAS,EAAE,CAAC,OAAO,CAAC;YACpB,YAAY,EAAE,CAAC,GAAG,yCAAyB,CAAC;YAC5C,gBAAgB,EAAE,OAAO,CAAC,GAAG,CAAC,yBAAyB;gBACtD,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,yBAAyB,CAAC;gBACjD,CAAC,CAAC,IAAI;YACP,kBAAkB,EAAE,OAAO,CAAC,GAAG,CAAC,0BAA0B;gBACzD,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,0BAA0B,CAAC;gBAClD,CAAC,CAAC,CAAC;YACJ,KAAK,EAAE;gBACN,OAAO,EAAE,IAAI;gBACb,OAAO,EAAE,IAAI;aACb;SACD,CAAC,CAAC;KACH;SAAM;QACN,OAAO,CAAC,GAAG,CAAC,0CAA0C,CAAC,CAAC;QACxD,OAAO,IAAI,CAAC;KACZ;AACF,CAAC;AA1BD,4CA0BC;AAEY,qBAAa,GAAG,gBAAgB,EAAE,CAAC;;;;;;;;;;;ACvBnC,+DAAmD,CAAC;;;;;;;;ACbjE;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;ACAA;;;;;;;;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;;;;;ACtBA,OAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;AAE/B,kDAAwC;AACxC,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;AAEhC,sEAA+C;AAC/C,OAAO,CAAC,GAAG,CAAC,sBAAsB,CAAC,CAAC;AAEpC,oBAAS,EAAC,4BAAY,CAAC;KACrB,IAAI,CAAC,GAAG,EAAE;IACV,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;AAC/B,CAAC,CAAC;KACD,KAAK,CAAC,KAAK,EAAE,KAAK,EAAE,EAAE;IACtB,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;IACnB,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC,CAAC","sources":["webpack://@gauzy/api/./src/plugin-config.ts","webpack://@gauzy/api/./src/plugins.ts","webpack://@gauzy/api/./src/sentry.ts","webpack://@gauzy/api/./version.ts","webpack://@gauzy/api/external commonjs \"@gauzy/changelog-plugin\"","webpack://@gauzy/api/external commonjs \"@gauzy/common\"","webpack://@gauzy/api/external commonjs \"@gauzy/config\"","webpack://@gauzy/api/external commonjs \"@gauzy/core\"","webpack://@gauzy/api/external commonjs \"@gauzy/jitsu-analytics-plugin\"","webpack://@gauzy/api/external commonjs \"@gauzy/job-proposal-plugin\"","webpack://@gauzy/api/external commonjs \"@gauzy/job-search-plugin\"","webpack://@gauzy/api/external commonjs \"@gauzy/knowledge-base-plugin\"","webpack://@gauzy/api/external commonjs \"@gauzy/sentry-plugin\"","webpack://@gauzy/api/external commonjs \"chalk\"","webpack://@gauzy/api/external node-commonjs \"path\"","webpack://@gauzy/api/webpack/bootstrap","webpack://@gauzy/api/./src/main.ts"],"sourcesContent":["import * as path from 'path';\r\nimport * as chalk from 'chalk';\r\nimport {\r\n\tApplicationPluginConfig,\r\n\tDEFAULT_API_PORT,\r\n\tDEFAULT_GRAPHQL_API_PATH,\r\n\tDEFAULT_API_HOST,\r\n\tDEFAULT_API_BASE_URL\r\n} from '@gauzy/common';\r\nimport {\r\n\tdbTypeOrmConnectionConfig,\r\n\tdbMikroOrmConnectionConfig,\r\n\tenvironment,\r\n\tdbKnexConnectionConfig\r\n} from '@gauzy/config';\r\nimport { SentryService } from '@gauzy/sentry-plugin';\r\nimport { SentryTracing as SentryPlugin } from './sentry';\r\nimport { version } from './../version';\r\nimport { plugins } from './plugins';\r\n\r\nconst { sentry } = environment;\r\n\r\nconsole.log(chalk.magenta(`API Version %s`), version);\r\nconsole.log('Plugin Config -> __dirname: ' + __dirname);\r\nconsole.log('Plugin Config -> process.cwd: ' + process.cwd());\r\n\r\n// TODO: maybe better to use process.cwd() instead of __dirname?\r\n\r\nlet assetPath: any;\r\nlet assetPublicPath: any;\r\n// for Docker\r\nif (__dirname.startsWith('/srv/gauzy')) {\r\n\tassetPath = '/srv/gauzy/apps/api/src/assets';\r\n\tassetPublicPath = '/srv/gauzy/apps/api/public';\r\n} else {\r\n\tassetPath = path.join(path.resolve(__dirname, '../../../', ...['apps', 'api', 'src', 'assets']));\r\n\tassetPublicPath = path.join(path.resolve(__dirname, '../../../', ...['apps', 'api', 'public']));\r\n}\r\n\r\nconsole.log('Plugin Config -> assetPath: ' + assetPath);\r\nconsole.log('Plugin Config -> assetPublicPath: ' + assetPublicPath);\r\nconsole.log('DB Synchronize: ' + process.env.DB_SYNCHRONIZE);\r\n\r\nexport const pluginConfig: ApplicationPluginConfig = {\r\n\tapiConfigOptions: {\r\n\t\thost: process.env.API_HOST || DEFAULT_API_HOST,\r\n\t\tport: process.env.API_PORT || DEFAULT_API_PORT,\r\n\t\tbaseUrl: process.env.API_BASE_URL || DEFAULT_API_BASE_URL,\r\n\t\tmiddleware: [],\r\n\t\tgraphqlConfigOptions: {\r\n\t\t\tpath: DEFAULT_GRAPHQL_API_PATH,\r\n\t\t\tplayground: true,\r\n\t\t\tdebug: true,\r\n\t\t\tapolloServerPlugins: []\r\n\t\t}\r\n\t},\r\n\tdbConnectionOptions: {\r\n\t\tretryAttempts: 100,\r\n\t\tretryDelay: 3000,\r\n\t\tmigrationsTransactionMode: 'each', // Run migrations automatically in each transaction. i.e.\"all\" | \"none\" | \"each\"\r\n\t\tmigrationsRun: process.env.DB_SYNCHRONIZE === 'true' ? false : true, // Run migrations automatically if we don't do DB_SYNCHRONIZE\r\n\t\t...dbTypeOrmConnectionConfig\r\n\t},\r\n\tdbMikroOrmConnectionOptions: {\r\n\t\t...dbMikroOrmConnectionConfig\r\n\t},\r\n\tdbKnexConnectionOptions: {\r\n\t\tretryAttempts: 100,\r\n\t\tretryDelay: 3000,\r\n\t\t...dbKnexConnectionConfig\r\n\t},\r\n\tassetOptions: {\r\n\t\tassetPath: assetPath,\r\n\t\tassetPublicPath: assetPublicPath\r\n\t},\r\n\t...(sentry?.dsn ? { logger: new SentryService(SentryPlugin.options) } : {}),\r\n\tplugins\r\n};\r\n","import { environment } from '@gauzy/config';\r\nimport { ChangelogPlugin } from '@gauzy/changelog-plugin';\r\nimport { JitsuAnalyticsPlugin } from '@gauzy/jitsu-analytics-plugin';\r\nimport { KnowledgeBasePlugin } from '@gauzy/knowledge-base-plugin';\r\nimport { JobProposalPlugin } from '@gauzy/job-proposal-plugin';\r\nimport { JobSearchPlugin } from '@gauzy/job-search-plugin';\r\nimport { SentryTracing as SentryPlugin } from './sentry';\r\n\r\nconst { jitsu, sentry } = environment;\r\n\r\n/**\r\n * An array of plugins to be included or used in the codebase.\r\n */\r\nexport const plugins = [\r\n    // Includes the SentryPlugin based on the presence of Sentry configuration.\r\n    ...(sentry && sentry.dsn ? [SentryPlugin] : []),\r\n    // Initializes the Jitsu Analytics Plugin by providing a configuration object.\r\n    JitsuAnalyticsPlugin.init({\r\n        config: {\r\n            host: jitsu.serverHost,\r\n            writeKey: jitsu.serverWriteKey,\r\n            debug: jitsu.debug,\r\n            echoEvents: jitsu.echoEvents\r\n        }\r\n    }),\r\n    // Indicates the inclusion or intention to use the ChangelogPlugin in the codebase.\r\n    ChangelogPlugin,\r\n    // Indicates the inclusion or intention to use the KnowledgeBasePlugin in the codebase.\r\n    KnowledgeBasePlugin,\r\n    // Indicates the inclusion or intention to use the JobProposalPlugin in the codebase.\r\n    JobProposalPlugin,\r\n    // Indicates the inclusion or intention to use the JobSearchPlugin in the codebase.\r\n    JobSearchPlugin\r\n];\r\n","import { environment } from '@gauzy/config';\r\nimport { SentryPlugin, DefaultSentryIntegrations } from '@gauzy/sentry-plugin';\r\nimport { version } from '../version';\r\n\r\n/**\r\n * Initializes and configures the Sentry module.\r\n * @returns The configured Sentry instance.\r\n */\r\nexport function initializeSentry(): typeof SentryPlugin | null {\r\n\tif (environment.sentry.dsn) {\r\n\t\tconsole.log('Initializing Sentry with DSN:', environment.sentry.dsn);\r\n\r\n\t\treturn SentryPlugin.init({\r\n\t\t\tdsn: environment.sentry.dsn,\r\n\t\t\tdebug: process.env.SENTRY_DEBUG === 'true' || !environment.production,\r\n\t\t\tenvironment: environment.production ? 'production' : 'development',\r\n\t\t\trelease: 'gauzy@' + version,\r\n\t\t\tlogLevels: ['error'],\r\n\t\t\tintegrations: [...DefaultSentryIntegrations],\r\n\t\t\ttracesSampleRate: process.env.SENTRY_TRACES_SAMPLE_RATE\r\n\t\t\t\t? parseInt(process.env.SENTRY_TRACES_SAMPLE_RATE)\r\n\t\t\t\t: 0.01,\r\n\t\t\tprofilesSampleRate: process.env.SENTRY_PROFILE_SAMPLE_RATE\r\n\t\t\t\t? parseInt(process.env.SENTRY_PROFILE_SAMPLE_RATE)\r\n\t\t\t\t: 1,\r\n\t\t\tclose: {\r\n\t\t\t\tenabled: true,\r\n\t\t\t\ttimeout: 3000 // Time in milliseconds to forcefully quit the application\r\n\t\t\t}\r\n\t\t});\r\n\t} else {\r\n\t\tconsole.log('Sentry not initialized: DSN not provided');\r\n\t\treturn null;\r\n\t}\r\n}\r\n\r\nexport const SentryTracing = initializeSentry();\r\n","/**\r\n * @description\r\n * Current version of the Gauzy API.\r\n *\r\n * @example\r\n * ```\r\n * import { version } from './version';\r\n *\r\n * console.log('Gauzy API version:', version);\r\n * ```\r\n *\r\n * @since 0.1.0\r\n */\r\nexport const version: string = require('./package.json').version;\r\n","module.exports = require(\"@gauzy/changelog-plugin\");","module.exports = require(\"@gauzy/common\");","module.exports = require(\"@gauzy/config\");","module.exports = require(\"@gauzy/core\");","module.exports = require(\"@gauzy/jitsu-analytics-plugin\");","module.exports = require(\"@gauzy/job-proposal-plugin\");","module.exports = require(\"@gauzy/job-search-plugin\");","module.exports = require(\"@gauzy/knowledge-base-plugin\");","module.exports = require(\"@gauzy/sentry-plugin\");","module.exports = require(\"chalk\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","console.log('API Starting...');\r\n\r\nimport { bootstrap } from '@gauzy/core';\r\nconsole.log('Bootstrap loaded');\r\n\r\nimport { pluginConfig } from './plugin-config';\r\nconsole.log('Plugin Config loaded');\r\n\r\nbootstrap(pluginConfig)\r\n\t.then(() => {\r\n\t\tconsole.log('API is running');\r\n\t})\r\n\t.catch(async (error) => {\r\n\t\tconsole.log(error);\r\n\t\tprocess.exit(1);\r\n\t});\r\n"],"names":[],"sourceRoot":""}