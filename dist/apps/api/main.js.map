{"version":3,"file":"main.js","mappings":"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","sources":["webpack://@gauzy/api/./src/plugin-config.ts","webpack://@gauzy/api/./src/plugins.ts","webpack://@gauzy/api/./src/sentry.ts","webpack://@gauzy/api/./version.ts","webpack://@gauzy/api/external commonjs \"@gauzy/changelog-plugin\"","webpack://@gauzy/api/external commonjs \"@gauzy/common\"","webpack://@gauzy/api/external commonjs \"@gauzy/config\"","webpack://@gauzy/api/external commonjs \"@gauzy/core\"","webpack://@gauzy/api/external commonjs \"@gauzy/jitsu-analytics-plugin\"","webpack://@gauzy/api/external commonjs \"@gauzy/job-proposal-plugin\"","webpack://@gauzy/api/external commonjs \"@gauzy/job-search-plugin\"","webpack://@gauzy/api/external commonjs \"@gauzy/knowledge-base-plugin\"","webpack://@gauzy/api/external commonjs \"@gauzy/sentry-plugin\"","webpack://@gauzy/api/external commonjs \"chalk\"","webpack://@gauzy/api/external node-commonjs \"path\"","webpack://@gauzy/api/webpack/bootstrap","webpack://@gauzy/api/./src/main.ts"],"sourcesContent":["import * as path from 'path';\r\nimport * as chalk from 'chalk';\r\nimport {\r\n\tApplicationPluginConfig,\r\n\tDEFAULT_API_PORT,\r\n\tDEFAULT_GRAPHQL_API_PATH,\r\n\tDEFAULT_API_HOST,\r\n\tDEFAULT_API_BASE_URL\r\n} from '@gauzy/common';\r\nimport {\r\n\tdbTypeOrmConnectionConfig,\r\n\tdbMikroOrmConnectionConfig,\r\n\tenvironment,\r\n\tdbKnexConnectionConfig\r\n} from '@gauzy/config';\r\nimport { SentryService } from '@gauzy/sentry-plugin';\r\nimport { SentryTracing as SentryPlugin } from './sentry';\r\nimport { version } from './../version';\r\nimport { plugins } from './plugins';\r\n\r\nconst { sentry } = environment;\r\n\r\nconsole.log(chalk.magenta(`API Version %s`), version);\r\nconsole.log('Plugin Config -> __dirname: ' + __dirname);\r\nconsole.log('Plugin Config -> process.cwd: ' + process.cwd());\r\n\r\n// TODO: maybe better to use process.cwd() instead of __dirname?\r\n\r\nlet assetPath: any;\r\nlet assetPublicPath: any;\r\n// for Docker\r\nif (__dirname.startsWith('/srv/gauzy')) {\r\n\tassetPath = '/srv/gauzy/apps/api/src/assets';\r\n\tassetPublicPath = '/srv/gauzy/apps/api/public';\r\n} else {\r\n\tassetPath = path.join(path.resolve(__dirname, '../../../', ...['apps', 'api', 'src', 'assets']));\r\n\tassetPublicPath = path.join(path.resolve(__dirname, '../../../', ...['apps', 'api', 'public']));\r\n}\r\n\r\nconsole.log('Plugin Config -> assetPath: ' + assetPath);\r\nconsole.log('Plugin Config -> assetPublicPath: ' + assetPublicPath);\r\nconsole.log('DB Synchronize: ' + process.env.DB_SYNCHRONIZE);\r\n\r\nexport const pluginConfig: ApplicationPluginConfig = {\r\n\tapiConfigOptions: {\r\n\t\thost: process.env.API_HOST || DEFAULT_API_HOST,\r\n\t\tport: process.env.API_PORT || DEFAULT_API_PORT,\r\n\t\tbaseUrl: process.env.API_BASE_URL || DEFAULT_API_BASE_URL,\r\n\t\tmiddleware: [],\r\n\t\tgraphqlConfigOptions: {\r\n\t\t\tpath: DEFAULT_GRAPHQL_API_PATH,\r\n\t\t\tplayground: true,\r\n\t\t\tdebug: true,\r\n\t\t\tapolloServerPlugins: []\r\n\t\t}\r\n\t},\r\n\tdbConnectionOptions: {\r\n\t\tretryAttempts: 100,\r\n\t\tretryDelay: 3000,\r\n\t\tmigrationsTransactionMode: 'each', // Run migrations automatically in each transaction. i.e.\"all\" | \"none\" | \"each\"\r\n\t\tmigrationsRun: process.env.DB_SYNCHRONIZE === 'true' ? false : true, // Run migrations automatically if we don't do DB_SYNCHRONIZE\r\n\t\t...dbTypeOrmConnectionConfig\r\n\t},\r\n\tdbMikroOrmConnectionOptions: {\r\n\t\t...dbMikroOrmConnectionConfig\r\n\t},\r\n\tdbKnexConnectionOptions: {\r\n\t\tretryAttempts: 100,\r\n\t\tretryDelay: 3000,\r\n\t\t...dbKnexConnectionConfig\r\n\t},\r\n\tassetOptions: {\r\n\t\tassetPath: assetPath,\r\n\t\tassetPublicPath: assetPublicPath\r\n\t},\r\n\t...(sentry?.dsn ? { logger: new SentryService(SentryPlugin.options) } : {}),\r\n\tplugins\r\n};\r\n","import { environment } from '@gauzy/config';\r\nimport { ChangelogPlugin } from '@gauzy/changelog-plugin';\r\nimport { JitsuAnalyticsPlugin } from '@gauzy/jitsu-analytics-plugin';\r\nimport { KnowledgeBasePlugin } from '@gauzy/knowledge-base-plugin';\r\nimport { JobProposalPlugin } from '@gauzy/job-proposal-plugin';\r\nimport { JobSearchPlugin } from '@gauzy/job-search-plugin';\r\nimport { SentryTracing as SentryPlugin } from './sentry';\r\n\r\nconst { jitsu, sentry } = environment;\r\n\r\n/**\r\n * An array of plugins to be included or used in the codebase.\r\n */\r\nexport const plugins = [\r\n    // Includes the SentryPlugin based on the presence of Sentry configuration.\r\n    ...(sentry && sentry.dsn ? [SentryPlugin] : []),\r\n    // Initializes the Jitsu Analytics Plugin by providing a configuration object.\r\n    JitsuAnalyticsPlugin.init({\r\n        config: {\r\n            host: jitsu.serverHost,\r\n            writeKey: jitsu.serverWriteKey,\r\n            debug: jitsu.debug,\r\n            echoEvents: jitsu.echoEvents\r\n        }\r\n    }),\r\n    // Indicates the inclusion or intention to use the ChangelogPlugin in the codebase.\r\n    ChangelogPlugin,\r\n    // Indicates the inclusion or intention to use the KnowledgeBasePlugin in the codebase.\r\n    KnowledgeBasePlugin,\r\n    // Indicates the inclusion or intention to use the JobProposalPlugin in the codebase.\r\n    JobProposalPlugin,\r\n    // Indicates the inclusion or intention to use the JobSearchPlugin in the codebase.\r\n    JobSearchPlugin\r\n];\r\n","import { environment } from '@gauzy/config';\r\nimport { SentryPlugin, DefaultSentryIntegrations } from '@gauzy/sentry-plugin';\r\nimport { version } from '../version';\r\n\r\n/**\r\n * Initializes and configures the Sentry module.\r\n * @returns The configured Sentry instance.\r\n */\r\nexport function initializeSentry(): typeof SentryPlugin | null {\r\n\tif (environment.sentry.dsn) {\r\n\t\tconsole.log('Initializing Sentry with DSN:', environment.sentry.dsn);\r\n\r\n\t\treturn SentryPlugin.init({\r\n\t\t\tdsn: environment.sentry.dsn,\r\n\t\t\tdebug: process.env.SENTRY_DEBUG === 'true' || !environment.production,\r\n\t\t\tenvironment: environment.production ? 'production' : 'development',\r\n\t\t\trelease: 'gauzy@' + version,\r\n\t\t\tlogLevels: ['error'],\r\n\t\t\tintegrations: [...DefaultSentryIntegrations],\r\n\t\t\ttracesSampleRate: process.env.SENTRY_TRACES_SAMPLE_RATE\r\n\t\t\t\t? parseInt(process.env.SENTRY_TRACES_SAMPLE_RATE)\r\n\t\t\t\t: 0.01,\r\n\t\t\tprofilesSampleRate: process.env.SENTRY_PROFILE_SAMPLE_RATE\r\n\t\t\t\t? parseInt(process.env.SENTRY_PROFILE_SAMPLE_RATE)\r\n\t\t\t\t: 1,\r\n\t\t\tclose: {\r\n\t\t\t\tenabled: true,\r\n\t\t\t\ttimeout: 3000 // Time in milliseconds to forcefully quit the application\r\n\t\t\t}\r\n\t\t});\r\n\t} else {\r\n\t\tconsole.log('Sentry not initialized: DSN not provided');\r\n\t\treturn null;\r\n\t}\r\n}\r\n\r\nexport const SentryTracing = initializeSentry();\r\n","/**\r\n * @description\r\n * Current version of the Gauzy API.\r\n *\r\n * @example\r\n * ```\r\n * import { version } from './version';\r\n *\r\n * console.log('Gauzy API version:', version);\r\n * ```\r\n *\r\n * @since 0.1.0\r\n */\r\nexport const version: string = require('./package.json').version;\r\n","module.exports = require(\"@gauzy/changelog-plugin\");","module.exports = require(\"@gauzy/common\");","module.exports = require(\"@gauzy/config\");","module.exports = require(\"@gauzy/core\");","module.exports = require(\"@gauzy/jitsu-analytics-plugin\");","module.exports = require(\"@gauzy/job-proposal-plugin\");","module.exports = require(\"@gauzy/job-search-plugin\");","module.exports = require(\"@gauzy/knowledge-base-plugin\");","module.exports = require(\"@gauzy/sentry-plugin\");","module.exports = require(\"chalk\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","console.log('API Starting...');\r\n\r\nimport { bootstrap } from '@gauzy/core';\r\nconsole.log('Bootstrap loaded');\r\n\r\nimport { pluginConfig } from './plugin-config';\r\nconsole.log('Plugin Config loaded');\r\n\r\nbootstrap(pluginConfig)\r\n\t.then(() => {\r\n\t\tconsole.log('API is running');\r\n\t})\r\n\t.catch(async (error) => {\r\n\t\tconsole.log(error);\r\n\t\tprocess.exit(1);\r\n\t});\r\n"],"names":["sentry","environment","assetPath","assetPublicPath","console","log","chalk","magenta","version","__dirname","process","cwd","startsWith","path","join","resolve","env","DB_SYNCHRONIZE","pluginConfig","apiConfigOptions","host","API_HOST","DEFAULT_API_HOST","port","API_PORT","DEFAULT_API_PORT","baseUrl","API_BASE_URL","DEFAULT_API_BASE_URL","middleware","graphqlConfigOptions","DEFAULT_GRAPHQL_API_PATH","playground","debug","apolloServerPlugins","dbConnectionOptions","retryAttempts","retryDelay","migrationsTransactionMode","migrationsRun","dbTypeOrmConnectionConfig","dbMikroOrmConnectionOptions","dbMikroOrmConnectionConfig","dbKnexConnectionOptions","dbKnexConnectionConfig","assetOptions","dsn","logger","SentryService","options","plugins","jitsu","JitsuAnalyticsPlugin","init","config","serverHost","writeKey","serverWriteKey","echoEvents","ChangelogPlugin","KnowledgeBasePlugin","JobProposalPlugin","JobSearchPlugin","initializeSentry","SentryPlugin","SENTRY_DEBUG","production","release","logLevels","integrations","DefaultSentryIntegrations","tracesSampleRate","SENTRY_TRACES_SAMPLE_RATE","parseInt","profilesSampleRate","SENTRY_PROFILE_SAMPLE_RATE","close","enabled","timeout","SentryTracing","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","bootstrap","then","catch","async","error","exit"],"sourceRoot":""}