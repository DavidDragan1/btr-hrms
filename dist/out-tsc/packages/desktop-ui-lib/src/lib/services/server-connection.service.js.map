{"version":3,"file":"server-connection.service.js","sourceRoot":"","sources":["../../../../../../../packages/desktop-ui-lib/src/lib/services/server-connection.service.ts"],"names":[],"mappings":";;;;AAAA,wCAA2C;AAC3C,+CAAkD;AAClD,mDAAwC;AAGjC,IAAM,uBAAuB,qCAA7B,MAAM,uBAAuB;IACnC,YAA6B,UAAsB,EAAmB,KAAY;QAArD,eAAU,GAAV,UAAU,CAAY;QAAmB,UAAK,GAAL,KAAK,CAAO;IAAG,CAAC;IAEtF,KAAK,CAAC,qBAAqB,CAAC,QAAgB;QAC3C,MAAM,GAAG,GAAG,GAAG,QAAQ,MAAM,CAAC;QAE9B,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACtC,OAAO,CAAC,GAAG,CAAC,mFAAmF,GAAG,EAAE,CAAC,CAAC;YAEtG,IAAI,QAAQ,KAAK,uBAAuB,EAAE;gBACzC,IAAI;oBACH,MAAM,iBAAiB,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;oBAEnD,IAAI,CAAC,iBAAiB,EAAE;wBACvB,OAAO,CAAC,KAAK,CAAC,uDAAuD,CAAC,CAAC;wBACvE,MAAM,CAAC,uDAAuD,CAAC,CAAC;wBAChE,OAAO;qBACP;oBAED,iBAAiB,CAAC,SAAS,CAAC;wBAC3B,IAAI,EAAE,CAAC,IAAS,EAAE,EAAE;4BACnB,IAAI,IAAI,EAAE;gCACT,IAAI,CAAC,KAAK,CAAC,gBAAgB,GAAG,IAAI,CAAC,MAAM,CAAC;gCAC1C,OAAO,CAAC,GAAG,CACV,kFAAkF,GAAG,OAAO,EAC5F,IAAI,CAAC,MAAM,CACX,CAAC;gCACF,OAAO,CAAC,IAAI,CAAC,CAAC;6BACd;iCAAM;gCACN,OAAO,CAAC,GAAG,CAAC,8BAA8B,CAAC,CAAC;gCAC5C,OAAO,CAAC,KAAK,CAAC,CAAC;6BACf;wBACF,CAAC;wBACD,KAAK,EAAE,CAAC,GAAG,EAAE,EAAE;4BACd,OAAO,CAAC,KAAK,CACZ,wEAAwE,GAAG,EAAE,EAC7E,GAAG,CACH,CAAC;4BAEF,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE;gCACtB,OAAO,CAAC,GAAG,CACV,kEAAkE,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CACtF,CAAC;gCACF,OAAO,CAAC,IAAI,CAAC,CAAC;6BACd;iCAAM;gCACN,IAAI,CAAC,KAAK,CAAC,gBAAgB,GAAG,GAAG,CAAC,MAAM,CAAC;gCACzC,MAAM,CAAC,GAAG,CAAC,CAAC;6BACZ;wBACF,CAAC;qBACD,CAAC,CAAC;iBACH;gBAAC,OAAO,KAAK,EAAE;oBACf,OAAO,CAAC,KAAK,CAAC,wEAAwE,GAAG,EAAE,EAAE,KAAK,CAAC,CAAC;oBACpG,MAAM,CAAC,KAAK,CAAC,CAAC;iBACd;aACD;iBAAM;gBACN,OAAO,CAAC,GAAG,CAAC,4CAA4C,GAAG,EAAE,CAAC,CAAC;gBAC/D,OAAO,CAAC,IAAI,CAAC,CAAC;aACd;QACF,CAAC,CAAC,CAAC;IACJ,CAAC;CACD,CAAA;kCA5DY,uBAAuB;IADnC,IAAA,iBAAU,GAAE;6CAE6B,iBAAU,EAA0B,qBAAK;GADtE,uBAAuB,CA4DnC","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Store } from './store.service';\r\n\r\n@Injectable()\r\nexport class ServerConnectionService {\r\n\tconstructor(private readonly httpClient: HttpClient, private readonly store: Store) {}\r\n\r\n\tasync checkServerConnection(endPoint: string) {\r\n\t\tconst url = `${endPoint}/api`;\r\n\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tconsole.log(`Checking server connection in ServerConnectionService in desktop-ui-lib on URL: ${url}`);\r\n\r\n\t\t\tif (endPoint !== 'http://localhost:3000') {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tconst requestObservable = this.httpClient.get(url);\r\n\r\n\t\t\t\t\tif (!requestObservable) {\r\n\t\t\t\t\t\tconsole.error('Failed to create an Observable from the HTTP request.');\r\n\t\t\t\t\t\treject('Failed to create an Observable from the HTTP request.');\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\trequestObservable.subscribe({\r\n\t\t\t\t\t\tnext: (resp: any) => {\r\n\t\t\t\t\t\t\tif (resp) {\r\n\t\t\t\t\t\t\t\tthis.store.serverConnection = resp.status;\r\n\t\t\t\t\t\t\t\tconsole.log(\r\n\t\t\t\t\t\t\t\t\t`Server connection status in ServerConnectionService in desktop-ui-lib for URL: ${url} is: `,\r\n\t\t\t\t\t\t\t\t\tresp.status\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\tresolve(true);\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tconsole.log('Server connection resp empty');\r\n\t\t\t\t\t\t\t\tresolve(false);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\terror: (err) => {\r\n\t\t\t\t\t\t\tconsole.error(\r\n\t\t\t\t\t\t\t\t`Error checking server connection in ServerConnectionService for URL: ${url}`,\r\n\t\t\t\t\t\t\t\terr\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\tif (this.store.userId) {\r\n\t\t\t\t\t\t\t\tconsole.log(\r\n\t\t\t\t\t\t\t\t\t`We were unable to connect to the server, but we have a user id ${this.store.userId}.`\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\tresolve(true);\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tthis.store.serverConnection = err.status;\r\n\t\t\t\t\t\t\t\treject(err);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t} catch (error) {\r\n\t\t\t\t\tconsole.error(`Error checking server connection in ServerConnectionService for URL: ${url}`, error);\r\n\t\t\t\t\treject(error);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tconsole.log(`Skip checking server connection for URL: ${url}`);\r\n\t\t\t\tresolve(true);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n}\r\n"]}