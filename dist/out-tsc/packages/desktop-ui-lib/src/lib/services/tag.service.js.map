{"version":3,"file":"tag.service.js","sourceRoot":"","sources":["../../../../../../../packages/desktop-ui-lib/src/lib/services/tag.service.ts"],"names":[],"mappings":";;;;AAAA,wCAA2C;AAC3C,+CAAkD;AAClD,+BAAmE;AACnE,0DAA2E;AAE3E,iDAAgD;AAKzC,IAAM,UAAU,wBAAhB,MAAM,UAAU;IACtB,YACkB,KAAiB,EACjB,gBAAiC,EACjC,MAAa;QAFb,UAAK,GAAL,KAAK,CAAY;QACjB,qBAAgB,GAAhB,gBAAgB,CAAiB;QACjC,WAAM,GAAN,MAAM,CAAO;IAC5B,CAAC;IAEG,MAAM,CAAC,GAAkB;QAC/B,OAAO,IAAA,qBAAc,EACpB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAO,GAAG,2BAAU,OAAO,EAAE,GAAG,CAAC,CAAC,IAAI,CACpD,IAAA,gBAAS,EAAC,GAAG,EAAE;YACd,IAAI,CAAC,gBAAgB,CAAC,KAAK,EAAE,CAAC;YAC9B,OAAO,IAAI,CAAC,OAAO,EAAE,CAAC;QACvB,CAAC,CAAC,CACF,CACD,CAAC;IACH,CAAC;IAEM,OAAO;QACb,MAAM,MAAM,GAAG;YACd,cAAc,EAAE,IAAI,CAAC,MAAM,CAAC,cAAc;YAC1C,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,QAAQ;SAC9B,CAAC;QACF,IAAI,KAAK,GAAG,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QACnD,IAAI,CAAC,KAAK,EAAE;YACX,KAAK,GAAG,IAAI,CAAC,KAAK;iBAChB,GAAG,CAAC,GAAG,2BAAU,aAAa,EAAE;gBAChC,MAAM,EAAE,IAAA,iBAAQ,EAAC,MAAM,CAAC;aACxB,CAAC;iBACD,IAAI,CACJ,IAAA,UAAG,EAAC,CAAC,QAA2B,EAAE,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,EACpD,IAAA,kBAAW,EAAC,CAAC,CAAC,CACd,CAAC;YACH,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;SAC9C;QACD,OAAO,IAAA,qBAAc,EAAC,KAAK,CAAC,CAAC;IAC9B,CAAC;CACD,CAAA;qBArCY,UAAU;IAHtB,IAAA,iBAAU,EAAC;QACX,UAAU,EAAE,MAAM;KAClB,CAAC;6CAGwB,iBAAU;QACC,gCAAe;QACzB,sBAAK;GAJnB,UAAU,CAqCtB","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { concatMap, firstValueFrom, map, shareReplay } from 'rxjs';\r\nimport { API_PREFIX, Store, TagCacheService } from '@gauzy/desktop-ui-lib';\r\nimport { IPagination, ITag } from '@gauzy/contracts';\r\nimport { toParams } from '@gauzy/ui-sdk/common';\r\n\r\n@Injectable({\r\n\tprovidedIn: 'root'\r\n})\r\nexport class TagService {\r\n\tconstructor(\r\n\t\tprivate readonly _http: HttpClient,\r\n\t\tprivate readonly _tagCacheService: TagCacheService,\r\n\t\tprivate readonly _store: Store\r\n\t) {}\r\n\r\n\tpublic create(tag: Partial<ITag>): Promise<ITag[]> {\r\n\t\treturn firstValueFrom(\r\n\t\t\tthis._http.post<ITag>(`${API_PREFIX}/tags`, tag).pipe(\r\n\t\t\t\tconcatMap(() => {\r\n\t\t\t\t\tthis._tagCacheService.clear();\r\n\t\t\t\t\treturn this.getTags();\r\n\t\t\t\t})\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n\r\n\tpublic getTags(): Promise<ITag[]> {\r\n\t\tconst params = {\r\n\t\t\torganizationId: this._store.organizationId,\r\n\t\t\ttenantId: this._store.tenantId\r\n\t\t};\r\n\t\tlet tags$ = this._tagCacheService.getValue(params);\r\n\t\tif (!tags$) {\r\n\t\t\ttags$ = this._http\r\n\t\t\t\t.get(`${API_PREFIX}/tags/level`, {\r\n\t\t\t\t\tparams: toParams(params)\r\n\t\t\t\t})\r\n\t\t\t\t.pipe(\r\n\t\t\t\t\tmap((response: IPagination<ITag>) => response.items),\r\n\t\t\t\t\tshareReplay(1)\r\n\t\t\t\t);\r\n\t\t\tthis._tagCacheService.setValue(tags$, params);\r\n\t\t}\r\n\t\treturn firstValueFrom(tags$);\r\n\t}\r\n}\r\n"]}