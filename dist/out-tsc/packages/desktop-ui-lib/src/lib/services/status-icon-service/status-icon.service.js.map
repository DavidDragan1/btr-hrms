{"version":3,"file":"status-icon.service.js","sourceRoot":"","sources":["../../../../../../../../packages/desktop-ui-lib/src/lib/services/status-icon-service/status-icon.service.ts"],"names":[],"mappings":";;;;AAAA,wCAA2C;AAC3C,2EAAqE;AACrE,+BAA0D;AAC1D,+CAAkD;AAClD,kFAA6E;AAC7E,gEAAkE;AAClE,8CAAqC;AAK9B,IAAM,iBAAiB,+BAAvB,MAAM,iBAAiB;IAC7B,YACkB,gBAAwC,EACxC,aAAiC,EACjC,aAA2B,EAC3B,KAAiB;QAHjB,qBAAgB,GAAhB,gBAAgB,CAAwB;QACxC,kBAAa,GAAb,aAAa,CAAoB;QACjC,kBAAa,GAAb,aAAa,CAAc;QAC3B,UAAK,GAAL,KAAK,CAAY;IAChC,CAAC;IAEG,IAAI,CAAC,OAAe;QAC1B,IAAI,KAAK,GAAG,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QACpD,IAAI,CAAC,KAAK,EAAE;YACX,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,EAAE,EAAE,YAAY,EAAE,MAAM,EAAE,CAAC,CAAC,IAAI,CAC7D,IAAA,gBAAS,EAAC,CAAC,QAAc,EAAE,EAAE,CAC5B,IAAI,CAAC,aAAa,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CACnD,EACD,IAAA,kBAAW,EAAC,CAAC,CAAC,CACd,CAAC;YACF,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;SAC/C;QACD,OAAO,KAAK,CAAC,IAAI,CAChB,IAAA,eAAG,EAAC,CAAC,WAAmB,EAAE,EAAE,CAC3B,IAAI,CAAC,aAAa,CAAC,sBAAsB,CAAC,WAAW,CAAC,CACtD,CACD,CAAC;IACH,CAAC;CACD,CAAA;4BAzBY,iBAAiB;IAH7B,IAAA,iBAAU,EAAC;QACX,UAAU,EAAE,MAAM;KAClB,CAAC;6CAGmC,kDAAsB;QACzB,yCAAkB;QAClB,+BAAY;QACpB,iBAAU;GALvB,iBAAiB,CAyB7B","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { StatusIconCacheService } from './status-icon-cache.service';\r\nimport { concatMap, Observable, shareReplay } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { ImageViewerService } from '../../image-viewer/image-viewer.service';\r\nimport { DomSanitizer, SafeUrl } from '@angular/platform-browser';\r\nimport { map } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n\tprovidedIn: 'root',\r\n})\r\nexport class StatusIconService {\r\n\tconstructor(\r\n\t\tprivate readonly _statusIconCache: StatusIconCacheService,\r\n\t\tprivate readonly _imageService: ImageViewerService,\r\n\t\tprivate readonly _domSanitizer: DomSanitizer,\r\n\t\tprivate readonly _http: HttpClient\r\n\t) {}\r\n\r\n\tpublic load(iconUrl: string): Observable<SafeUrl> {\r\n\t\tlet icon$ = this._statusIconCache.getValue(iconUrl);\r\n\t\tif (!icon$) {\r\n\t\t\ticon$ = this._http.get(iconUrl, { responseType: 'blob' }).pipe(\r\n\t\t\t\tconcatMap((response: Blob) =>\r\n\t\t\t\t\tthis._imageService.getBase64ImageFromBlob(response)\r\n\t\t\t\t),\r\n\t\t\t\tshareReplay(1)\r\n\t\t\t);\r\n\t\t\tthis._statusIconCache.setValue(icon$, iconUrl);\r\n\t\t}\r\n\t\treturn icon$.pipe(\r\n\t\t\tmap((base64Image: string) =>\r\n\t\t\t\tthis._domSanitizer.bypassSecurityTrustUrl(base64Image)\r\n\t\t\t)\r\n\t\t);\r\n\t}\r\n}\r\n"]}