{"version":3,"file":"storage.service.js","sourceRoot":"","sources":["../../../../../../../packages/desktop-ui-lib/src/lib/services/storage.service.ts"],"names":[],"mappings":";;;;AAAA,wCAA2C;AAC3C,+BAAmE;AAe5D,IAAM,cAAc,4BAApB,MAAM,cAAc;IAC1B,gBAAe,CAAC;IAEhB;;;OAGG;IACH,IAAY,QAAQ;QACnB,OAAO,YAAY,CAAC;IACrB,CAAC;IAED;;;OAGG;IACI,KAAK,CAAC,OAAO,CAAC,IAAsB;QAC1C,MAAM,EAAE,SAAS,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;QACxC,MAAM,OAAO,GAAG,MAAM,IAAA,qBAAc,EAAC,KAAK,CAAC,CAAC;QAC5C,IAAI,CAAC,QAAQ,CAAC,OAAO,CACpB,IAAI,CAAC,GAAG,EACR,IAAI,CAAC,SAAS,CAAC,EAAE,SAAS,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,CAC7C,CAAC;IACH,CAAC;IAED;;;;OAIG;IACI,OAAO,CAAC,GAAW;QACzB,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC;QACtD,IAAI,MAAM,EAAE;YACX,MAAM,EAAE,SAAS,EAAE,KAAK,EAAE,GAAG,MAAM,CAAC;YACpC,MAAM,MAAM,GAAG,IAAI,sBAAe,CAAI,KAAK,CAAC,CAAC;YAC7C,OAAO,EAAE,KAAK,EAAE,MAAM,CAAC,YAAY,EAAE,EAAE,SAAS,EAAE,CAAC;SACnD;aAAM;YACN,OAAO,IAAI,CAAC;SACZ;IACF,CAAC;IAED;;;OAGG;IACI,UAAU,CAAC,GAAW;QAC5B,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;IAC/B,CAAC;IAED;;OAEG;IACI,KAAK;QACX,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC;IACvB,CAAC;IAED,6CAA6C;IACtC,UAAU;QAChB,OAAO,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACnC,CAAC;CACD,CAAA;yBA3DY,cAAc;IAH1B,IAAA,iBAAU,EAAC;QACX,UAAU,EAAE,MAAM;KAClB,CAAC;;GACW,cAAc,CA2D1B","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable, firstValueFrom } from 'rxjs';\r\n\r\nexport interface ICache<T> {\r\n\texpiresAt: Date;\r\n\tvalue: Observable<T>;\r\n}\r\n\r\ninterface IHash<S, T> {\r\n\tkey: S;\r\n\tcache: ICache<T>;\r\n}\r\n\r\n@Injectable({\r\n\tprovidedIn: 'root',\r\n})\r\nexport class StorageService<T> {\r\n\tconstructor() {}\r\n\r\n\t/**\r\n\t * If the localStorage object exists, return it, otherwise return an empty object.\r\n\t * @returns The localStorage object.\r\n\t */\r\n\tprivate get _storage(): Storage {\r\n\t\treturn localStorage;\r\n\t}\r\n\r\n\t/**\r\n\t * It sets the value of the key in the storage.\r\n\t * @param value - IHash<string, any>\r\n\t */\r\n\tpublic async setItem(hash: IHash<string, T>): Promise<void> {\r\n\t\tconst { expiresAt, value } = hash.cache;\r\n\t\tconst toStore = await firstValueFrom(value);\r\n\t\tthis._storage.setItem(\r\n\t\t\thash.key,\r\n\t\t\tJSON.stringify({ expiresAt, value: toStore })\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * It gets an item from the local storage\r\n\t * @param {string} key - The key of the item you want to get.\r\n\t * @returns The value of the key in the storage.\r\n\t */\r\n\tpublic getItem(key: string): ICache<T> {\r\n\t\tconst stored = JSON.parse(this._storage.getItem(key));\r\n\t\tif (stored) {\r\n\t\t\tconst { expiresAt, value } = stored;\r\n\t\t\tconst value$ = new BehaviorSubject<T>(value);\r\n\t\t\treturn { value: value$.asObservable(), expiresAt };\r\n\t\t} else {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * It removes an item from the local storage\r\n\t * @param {string} key - The key of the item you want to remove.\r\n\t */\r\n\tpublic removeItem(key: string): void {\r\n\t\tthis._storage.removeItem(key);\r\n\t}\r\n\r\n\t/**\r\n\t * It clears the storage.\r\n\t */\r\n\tpublic clear(): void {\r\n\t\tthis._storage.clear();\r\n\t}\r\n\r\n\t/* Returning a copy of the storage object. */\r\n\tpublic getAllKeys(): string[] {\r\n\t\treturn Object.keys(this._storage);\r\n\t}\r\n}\r\n"]}