{"version":3,"file":"error-handler.service.js","sourceRoot":"","sources":["../../../../../../../packages/desktop-ui-lib/src/lib/services/error-handler.service.ts"],"names":[],"mappings":";;;;AAAA,+CAAyD;AACzD,wCAAyD;AACzD,+EAA0E;AAC1E,iEAA4D;AAC5D,iEAA4D;AAC5D,mDAAqD;AAK9C,IAAM,mBAAmB,iCAAzB,MAAM,mBAAmB;IAC/B,YACkB,sBAAiD,EACjD,mBAAuC,EACvC,mBAAuC,EACvC,cAA6B;QAH7B,2BAAsB,GAAtB,sBAAsB,CAA2B;QACjD,wBAAmB,GAAnB,mBAAmB,CAAoB;QACvC,wBAAmB,GAAnB,mBAAmB,CAAoB;QACvC,mBAAc,GAAd,cAAc,CAAe;QAE9C,OAAO,CAAC,KAAK,GAAG,cAAc,CAAC,GAAG,CAAC,KAAK,CAAC;QACzC,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,cAAc,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;IACtD,CAAC;IAEM,WAAW,CAAC,KAAgC;QAClD,IAAI,OAAe,CAAC;QACpB,IAAI,KAAK,YAAY,wBAAiB,EAAE;YACvC,IAAI,CAAC,mBAAmB,CAAC,OAAO,GAAG,KAAK,CAAC;YACzC,OAAO,GAAG,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC;SAC3C;aAAM;YACN,IAAI,CAAC,mBAAmB,CAAC,OAAO,GAAG,KAAK,CAAC;YACzC,OAAO,GAAG,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC;YAC3C,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC;SAC9D;QAED,oCAAoC;QACpC,IAAI,OAAO,CAAC,QAAQ,CAAC,oBAAoB,CAAC,EAAE;YAC3C,OAAO,CAAC,KAAK,CAAC,wCAAwC,CAAC,CAAC;YACxD,OAAO;SACP;QAED,IAAI,CAAC,sBAAsB,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QAC3C,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IACtB,CAAC;CACD,CAAA;8BA/BY,mBAAmB;IAH/B,IAAA,iBAAU,EAAC;QACX,UAAU,EAAE,MAAM;KAClB,CAAC;6CAGyC,uDAAyB;QAC5B,yCAAkB;QAClB,yCAAkB;QACvB,wBAAa;GALnC,mBAAmB,CA+B/B","sourcesContent":["import { HttpErrorResponse } from '@angular/common/http';\r\nimport { Injectable, ErrorHandler } from '@angular/core';\r\nimport { ToastrNotificationService } from './toastr-notification.service';\r\nimport { ErrorClientService } from './error-client.service';\r\nimport { ErrorServerService } from './error-server.service';\r\nimport { LoggerService } from '../electron/services';\r\n\r\n@Injectable({\r\n\tprovidedIn: 'root',\r\n})\r\nexport class ErrorHandlerService implements ErrorHandler {\r\n\tconstructor(\r\n\t\tprivate readonly _toastrNotifierService: ToastrNotificationService,\r\n\t\tprivate readonly _errorClientService: ErrorClientService,\r\n\t\tprivate readonly _errorServerService: ErrorServerService,\r\n\t\tprivate readonly _loggerService: LoggerService\r\n\t) {\r\n\t\tconsole.error = _loggerService.log.error;\r\n\t\tObject.assign(console, _loggerService.log.functions);\r\n\t}\r\n\r\n\tpublic handleError(error: Error | HttpErrorResponse): void {\r\n\t\tlet message: string;\r\n\t\tif (error instanceof HttpErrorResponse) {\r\n\t\t\tthis._errorServerService.message = error;\r\n\t\t\tmessage = this._errorServerService.message;\r\n\t\t} else {\r\n\t\t\tthis._errorClientService.message = error;\r\n\t\t\tmessage = this._errorClientService.message;\r\n\t\t\tthis._loggerService.log.debug(this._errorClientService.stack);\r\n\t\t}\r\n\r\n\t\t/** Override the AW error message */\r\n\t\tif (message.includes('localhost:5600/api')) {\r\n\t\t\tconsole.error('ActivityWatch service is not available');\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis._toastrNotifierService.error(message);\r\n\t\tconsole.error(error);\r\n\t}\r\n}\r\n"]}