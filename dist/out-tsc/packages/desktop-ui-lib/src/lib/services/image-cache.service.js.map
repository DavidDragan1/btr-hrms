{"version":3,"file":"image-cache.service.js","sourceRoot":"","sources":["../../../../../../../packages/desktop-ui-lib/src/lib/services/image-cache.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Store } from './store.service';\r\nimport { AbstractCacheService } from './abstract-cache.service';\r\nimport { StorageService } from './storage.service';\r\nimport * as moment from 'moment';\r\nimport { LinkedList } from '../offline-sync';\r\nimport { Observable } from 'rxjs';\r\nimport hash from 'hash-it';\r\n\r\ninterface IImageCache<T> {\r\n\tvalue: Observable<T>;\r\n\tobject: T;\r\n}\r\n\r\n@Injectable({\r\n\tprovidedIn: 'root',\r\n})\r\nexport class ImageCacheService extends AbstractCacheService<string> {\r\n\tprivate _lastCached: Date;\r\n\tprivate _limit: number;\r\n\tprivate _imageCacheList: LinkedList<IImageCache<string>>;\r\n\r\n\tconstructor(\r\n\t\tprotected _storageService: StorageService<string>,\r\n\t\tprotected _store: Store\r\n\t) {\r\n\t\tsuper(_storageService, _store);\r\n\t\tthis.prefix = ImageCacheService.name.toString();\r\n\t\tthis.duration = 10 * 60 * 1000; // 10 minutes;\r\n\t\tthis._lastCached = new Date();\r\n\t\tthis._imageCacheList = new LinkedList();\r\n\t\tthis._limit = 10; // Max 10 images in local storage;\r\n\t}\r\n\r\n\tpublic clear() {\r\n\t\tif (\r\n\t\t\tmoment(new Date()).diff(this._lastCached, 'milliseconds') >\r\n\t\t\tthis.duration\r\n\t\t) {\r\n\t\t\tsuper.clear();\r\n\t\t\tthis._lastCached = new Date();\r\n\t\t}\r\n\t}\r\n\r\n\tpublic setValue(value: Observable<string>, object: string) {\r\n\t\tif (this._size > this._limit) {\r\n\t\t\tconst imageCache = this._imageCacheList.tail;\r\n\t\t\timageCache\r\n\t\t\t\t? this._storageService.removeItem(this._key(imageCache.data.object))\r\n\t\t\t\t: super.clear();\r\n\t\t}\r\n\t\tthis._imageCacheList.append({ value, object });\r\n\t\tsuper.setValue(value, object);\r\n\t}\r\n\r\n\tpublic getValue(object: string): Observable<string> {\r\n\t\tlet temp = this._imageCacheList.head;\r\n\t\tlet item = null;\r\n\t\twhile (!!temp) {\r\n\t\t\tif (temp.data.object === object) {\r\n\t\t\t\titem = temp.data.value;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\ttemp = temp.next;\r\n\t\t}\r\n\t\treturn !!item ? item : super.getValue(object);\r\n\t}\r\n\r\n\tprivate _key(object: string): string {\r\n\t\treturn this.prefix.concat(hash(object).toString());\r\n\t}\r\n\r\n\tprivate get _size(): number {\r\n\t\treturn this._storageService\r\n\t\t\t.getAllKeys()\r\n\t\t\t.filter((key: string) => key.includes(this.prefix)).length;\r\n\t}\r\n\r\n\tpublic get limit(): number {\r\n\t\treturn this._limit;\r\n\t}\r\n\r\n\tpublic set limit(value: number) {\r\n\t\tthis._limit = value;\r\n\t}\r\n}\r\n"]}