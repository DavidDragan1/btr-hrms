{"version":3,"file":"electron.service.js","sourceRoot":"","sources":["../../../../../../../../../packages/desktop-ui-lib/src/lib/electron/services/electron/electron.service.ts"],"names":[],"mappings":";;;;AAAA,wCAA2C;AAKpC,IAAM,eAAe,6BAArB,MAAM,eAAe;IAM3B;;OAEG;IACH,IAAI,UAAU;QACb,OAAO,CAAC,CAAC,CAAC,MAAM,IAAK,MAAc,CAAC,OAAO,IAAK,MAAc,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IAC9E,CAAC;IAED;QACC,+EAA+E;QAC/E,IAAI,IAAI,CAAC,UAAU,EAAE;YACpB,0HAA0H;YAC1H,yDAAyD;YACzD,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,WAAW,CAAC;YAC1D,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC;YACjD,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC;YAC9C,IAAI,CAAC,eAAe,GAAG;gBACtB,UAAU,EAAE,KAAK,EAAE,IAAI,EAAE,EAAE,CAC1B,MAAM,IAAI,CAAC,WAAW,CAAC,MAAM,CAC5B,8BAA8B,EAC9B,IAAI,CACJ;aACF,CAAC;SACF;IACF,CAAC;CACD,CAAA;0BA9BY,eAAe;IAD3B,IAAA,iBAAU,GAAE;;GACA,eAAe,CA8B3B","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { ipcRenderer, desktopCapturer, shell } from 'electron';\r\nimport * as remote from '@electron/remote';\r\n\r\n@Injectable()\r\nexport class ElectronService {\r\n\tipcRenderer: typeof ipcRenderer;\r\n\tremote: typeof remote;\r\n\tdesktopCapturer: typeof desktopCapturer;\r\n\tshell: typeof shell;\r\n\r\n\t/**\r\n\t * Checks if the application is running in the Electron environment.\r\n\t */\r\n\tget isElectron(): boolean {\r\n\t\treturn !!(window && (window as any).process && (window as any).process.type);\r\n\t}\r\n\r\n\tconstructor() {\r\n\t\t// Conditional imports because we only want to load modules inside Electron App\r\n\t\tif (this.isElectron) {\r\n\t\t\t// Previously we used that class to on-demand load the electron-log module, but now we load it in the header of this file.\r\n\t\t\t// Still we want to keep that way to \"require\" it for now\r\n\t\t\tthis.ipcRenderer = window.require('electron').ipcRenderer;\r\n\t\t\tthis.remote = window.require('@electron/remote');\r\n\t\t\tthis.shell = window.require('electron').shell;\r\n\t\t\tthis.desktopCapturer = {\r\n\t\t\t\tgetSources: async (opts) =>\r\n\t\t\t\t\tawait this.ipcRenderer.invoke(\r\n\t\t\t\t\t\t'DESKTOP_CAPTURER_GET_SOURCES',\r\n\t\t\t\t\t\topts\r\n\t\t\t\t\t),\r\n\t\t\t};\r\n\t\t}\r\n\t}\r\n}\r\n"]}