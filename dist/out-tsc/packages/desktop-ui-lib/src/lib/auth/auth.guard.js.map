{"version":3,"file":"auth.guard.js","sourceRoot":"","sources":["../../../../../../../packages/desktop-ui-lib/src/lib/auth/auth.guard.ts"],"names":[],"mappings":";;;;AAAA,wCAA2C;AAC3C,4CAKyB;AACzB,yCAAuD;AACvD,0CAAoC;AACpC,mDAAuD;AAGhD,IAAM,SAAS,uBAAf,MAAM,SAAS;IACrB,YACkB,MAAc,EACd,WAAwB,EACxB,eAAgC,EAChC,YAA0B,EAC1B,KAAY;QAJZ,WAAM,GAAN,MAAM,CAAQ;QACd,gBAAW,GAAX,WAAW,CAAa;QACxB,oBAAe,GAAf,eAAe,CAAiB;QAChC,iBAAY,GAAZ,YAAY,CAAc;QAC1B,UAAK,GAAL,KAAK,CAAO;IAC3B,CAAC;IAEJ,KAAK,CAAC,WAAW,CAChB,KAA6B,EAC7B,KAA0B;QAE1B,IAAI,eAAe,GAAG,KAAK,CAAC;QAC5B,IAAI;YACH,eAAe,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,eAAe,EAAE,CAAC;SAC3D;QAAC,OAAO,KAAK,EAAE;YACf,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;SACrB;QACD,OAAO,CAAC,GAAG,CACV,sBAAsB,EACtB,GAAG,eAAe,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,EAAE,CACvC,CAAC;QAEF,IAAI,eAAe,EAAE;YACpB,OAAO,IAAI,CAAC,CAAC,2BAA2B;SACxC;aAAM;YACN,IAAI,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM;gBAAE,OAAO,IAAI,CAAC;YACrC,MAAM,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YACxC,OAAO,KAAK,CAAC;SACb;IACF,CAAC;IAEO,KAAK,CAAC,iBAAiB,CAAC,SAAiB;QAChD,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE;YACtB,IAAI,CAAC,aAAa,EAAE,CAAC;YACrB,IAAI,CAAC,mBAAmB,EAAE,CAAC;SAC3B;QACD,MAAM,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;IACvC,CAAC;IAEO,aAAa;QACpB,IAAI,IAAI,CAAC,eAAe,CAAC,UAAU,EAAE;YACpC,IAAI,CAAC,eAAe,CAAC,WAAW,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;SACxD;IACF,CAAC;IAEO,mBAAmB;QAC1B,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC;IAC5B,CAAC;IAEO,KAAK,CAAC,eAAe,CAAC,SAAiB;QAC9C,MAAM,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,aAAa,CAAC,EAAE;YAC3C,WAAW,EAAE,EAAE,SAAS,EAAE;SAC1B,CAAC,CAAC;IACJ,CAAC;CACD,CAAA;oBAxDY,SAAS;IADrB,IAAA,iBAAU,GAAE;6CAGc,eAAM;QACD,sBAAW;QACP,0BAAe;QAClB,uBAAY;QACnB,gBAAK;GANlB,SAAS,CAwDrB","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport {\r\n\tActivatedRouteSnapshot,\r\n\tCanActivate,\r\n\tRouter,\r\n\tRouterStateSnapshot,\r\n} from '@angular/router';\r\nimport { AuthService, AuthStrategy } from './services';\r\nimport { Store } from '../services';\r\nimport { ElectronService } from '../electron/services';\r\n\r\n@Injectable()\r\nexport class AuthGuard implements CanActivate {\r\n\tconstructor(\r\n\t\tprivate readonly router: Router,\r\n\t\tprivate readonly authService: AuthService,\r\n\t\tprivate readonly electronService: ElectronService,\r\n\t\tprivate readonly authStrategy: AuthStrategy,\r\n\t\tprivate readonly store: Store\r\n\t) {}\r\n\r\n\tasync canActivate(\r\n\t\troute: ActivatedRouteSnapshot,\r\n\t\tstate: RouterStateSnapshot\r\n\t) {\r\n\t\tlet isAuthenticated = false;\r\n\t\ttry {\r\n\t\t\tisAuthenticated = await this.authService.isAuthenticated();\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error(error);\r\n\t\t}\r\n\t\tconsole.log(\r\n\t\t\t'Token Authenticated:',\r\n\t\t\t`${isAuthenticated ? 'true' : 'false'}`\r\n\t\t);\r\n\r\n\t\tif (isAuthenticated) {\r\n\t\t\treturn true; // logged in so return true\r\n\t\t} else {\r\n\t\t\tif (!!this.store.userId) return true;\r\n\t\t\tawait this.logoutAndRedirect(state.url);\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\tprivate async logoutAndRedirect(returnUrl: string): Promise<void> {\r\n\t\tif (this.store.userId) {\r\n\t\t\tthis.logoutDesktop();\r\n\t\t\tthis.logoutAndClearStore();\r\n\t\t}\r\n\t\tawait this.redirectToLogin(returnUrl);\r\n\t}\r\n\r\n\tprivate logoutDesktop() {\r\n\t\tif (this.electronService.isElectron) {\r\n\t\t\tthis.electronService.ipcRenderer.send('logout_desktop');\r\n\t\t}\r\n\t}\r\n\r\n\tprivate logoutAndClearStore() {\r\n\t\tthis.authStrategy.logout();\r\n\t}\r\n\r\n\tprivate async redirectToLogin(returnUrl: string) {\r\n\t\tawait this.router.navigate(['/auth/login'], {\r\n\t\t\tqueryParams: { returnUrl },\r\n\t\t});\r\n\t}\r\n}\r\n"]}