{"version":3,"file":"always-on.service.js","sourceRoot":"","sources":["../../../../../../../packages/desktop-ui-lib/src/lib/always-on/always-on.service.ts"],"names":[],"mappings":";;;;AAAA,wCAA2C;AAC3C,+BAAkC;AAClC,mDAAuD;AACvD,wCAAwC;AAExC,IAAY,iBAIX;AAJD,WAAY,iBAAiB;IAC5B,wCAAmB,CAAA;IACnB,wCAAmB,CAAA;IACnB,wCAAmB,CAAA;AACpB,CAAC,EAJW,iBAAiB,iCAAjB,iBAAiB,QAI5B;AAUM,IAAM,eAAe,6BAArB,MAAM,eAAe;IAC3B,YAA6B,gBAAiC;QAAjC,qBAAgB,GAAhB,gBAAgB,CAAiB;IAAI,CAAC;IAE5D,GAAG,CAAC,KAAwB;QAClC,IAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC,IAAI,CAAC,sBAAsB,EAAE,KAAK,CAAC,CAAC;IACvE,CAAC;IAED,IAAW,MAAM;QAChB,OAAO,IAAI,iBAAU,CAAC,CAAC,QAAQ,EAAE,EAAE;YAClC,IAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC,EAAE,CACnC,sBAAsB,EACtB,CAAC,CAAC,EAAE,KAAwB,EAAE,EAAE;gBAC/B,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACtB,CAAC,CACD,CAAC;QACH,CAAC,CAAC,CAAC;IACJ,CAAC;IAED,IAAW,QAAQ;QAClB,OAAO,IAAI,iBAAU,CAAC,CAAC,QAAQ,EAAE,EAAE;YAClC,IAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC,EAAE,CACnC,gBAAgB,EAChB,CAAC,CAAC,EAAE,KAAmB,EAAE,EAAE;gBAC1B,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACtB,CAAC,CACD,CAAC;QACH,CAAC,CAAC,CAAC;IACJ,CAAC;IAEM,MAAM,CAAC,OAAe,EAAE,KAAa;QAC3C,IAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC,IAAI,CAAC,gBAAgB,EAAE;YACxD,KAAK,EAAE,MAAM,CAAC,QAAQ,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC,MAAM,CAAC,OAAO,EAAE;gBACxD,IAAI,EAAE,KAAK;gBACX,KAAK,EAAE,IAAI;aACX,CAAC;YACF,OAAO;SACP,CAAC,CAAC;IACJ,CAAC;CACD,CAAA;0BAtCY,eAAe;IAH3B,IAAA,iBAAU,EAAC;QACX,UAAU,EAAE,MAAM;KAClB,CAAC;6CAE8C,0BAAe;GADlD,eAAe,CAsC3B","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { ElectronService } from '../electron/services';\r\nimport * as moment from \"moment/moment\";\r\n\r\nexport enum AlwaysOnStateEnum {\r\n\tSTARTED = 'Started',\r\n\tSTOPPED = 'Stopped',\r\n\tLOADING = 'loading',\r\n}\r\n\r\nexport interface ITimeCounter {\r\n\tcurrent: string;\r\n\ttoday: string;\r\n}\r\n\r\n@Injectable({\r\n\tprovidedIn: 'root',\r\n})\r\nexport class AlwaysOnService {\r\n\tconstructor(private readonly _electronService: ElectronService) { }\r\n\r\n\tpublic run(state: AlwaysOnStateEnum) {\r\n\t\tthis._electronService.ipcRenderer.send('change_state_from_ao', state);\r\n\t}\r\n\r\n\tpublic get state$(): Observable<AlwaysOnStateEnum> {\r\n\t\treturn new Observable((observer) => {\r\n\t\t\tthis._electronService.ipcRenderer.on(\r\n\t\t\t\t'change_state_from_ao',\r\n\t\t\t\t(_, state: AlwaysOnStateEnum) => {\r\n\t\t\t\t\tobserver.next(state);\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t});\r\n\t}\r\n\r\n\tpublic get counter$(): Observable<ITimeCounter> {\r\n\t\treturn new Observable((observer) => {\r\n\t\t\tthis._electronService.ipcRenderer.on(\r\n\t\t\t\t'ao_time_update',\r\n\t\t\t\t(_, count: ITimeCounter) => {\r\n\t\t\t\t\tobserver.next(count);\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t});\r\n\t}\r\n\r\n\tpublic update(current: string, today: number): void {\r\n\t\tthis._electronService.ipcRenderer.send('ao_time_update', {\r\n\t\t\ttoday: moment.duration(today, 'seconds').format('HH:mm', {\r\n\t\t\t\ttrim: false,\r\n\t\t\t\ttrunc: true\r\n\t\t\t}),\r\n\t\t\tcurrent\r\n\t\t});\r\n\t}\r\n}\r\n"]}