{"version":3,"file":"offline-queue.js","sourceRoot":"","sources":["../../../../../../../../packages/desktop-ui-lib/src/lib/offline-sync/interfaces/offline-queue.ts"],"names":[],"mappings":";;;;AAAA,yDAAqD;AACrD,+BAA4C;AAE5C,0DAAsD;AAI/C,IAAe,YAAY,0BAA3B,MAAe,YAAY;IAKjC;QACC,IAAI,CAAC,MAAM,GAAG,IAAI,wBAAU,EAAK,CAAC;QAClC,IAAI,CAAC,cAAc,GAAG,IAAI,cAAO,EAAE,CAAC;IACrC,CAAC;IAKM,OAAO,CAAC,IAAO;QACrB,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACzB,IAAI,CAAC,WAAW,EAAE,CAAC;IACpB,CAAC;IAEM,KAAK,CAAC,OAAO;QACnB,MAAM,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC;QAC3B,IAAI,CAAC,WAAW,EAAE,CAAC;IACpB,CAAC;IAEM,OAAO;QACb,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;IAC9B,CAAC;IAED,IAAW,MAAM;QAChB,OAAO,IAAI,CAAC,cAAc,CAAC,YAAY,EAAE,CAAC;IAC3C,CAAC;IAED,IAAW,KAAK;QACf,OAAO,IAAI,CAAC,MAAM,CAAC;IACpB,CAAC;IAED,IAAW,KAAK;QACf,OAAO,IAAI,CAAC,MAAM,CAAC;IACpB,CAAC;IAED,IAAW,KAAK,CAAC,KAAoB;QACpC,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;IACrB,CAAC;IAEO,WAAW;QAClB,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACtC,CAAC;CACD,CAAA;uBA9CqB,YAAY;IADjC,IAAA,4BAAY,EAAC,EAAE,eAAe,EAAE,IAAI,EAAE,CAAC;;GAClB,YAAY,CA8CjC","sourcesContent":["import { UntilDestroy } from '@ngneat/until-destroy';\r\nimport { Observable, Subject, } from 'rxjs';\r\nimport { IQueue } from './iqueue';\r\nimport { LinkedList } from '../concretes/linked-list';\r\nimport { QueueState } from './queue-state';\r\n\r\n@UntilDestroy({ checkProperties: true })\r\nexport abstract class OfflineQueue<T> implements IQueue<T> {\r\n\tprivate _queue: LinkedList<T>;\r\n\tprivate _queueChanged$: Subject<QueueState<T>>;\r\n\tprivate _state: QueueState<T>;\r\n\r\n\tconstructor() {\r\n\t\tthis._queue = new LinkedList<T>();\r\n\t\tthis._queueChanged$ = new Subject();\r\n\t}\r\n\r\n\tpublic abstract synchronize(data: T): Promise<void>;\r\n\tpublic abstract process(): Promise<void>;\r\n\r\n\tpublic enqueue(data: T): void {\r\n\t\tthis.state.enqueue(data);\r\n\t\tthis.notifyState();\r\n\t}\r\n\r\n\tpublic async dequeue(): Promise<void> {\r\n\t\tawait this.state.dequeue();\r\n\t\tthis.notifyState();\r\n\t}\r\n\r\n\tpublic isEmpty(): boolean {\r\n\t\treturn this._queue.isEmpty();\r\n\t}\r\n\r\n\tpublic get state$(): Observable<QueueState<T>> {\r\n\t\treturn this._queueChanged$.asObservable();\r\n\t}\r\n\r\n\tpublic get queue(): LinkedList<T> {\r\n\t\treturn this._queue;\r\n\t}\r\n\r\n\tpublic get state(): QueueState<T> {\r\n\t\treturn this._state;\r\n\t}\r\n\r\n\tpublic set state(value: QueueState<T>) {\r\n\t\tthis._state = value;\r\n\t}\r\n\r\n\tprivate notifyState() {\r\n\t\tthis._queueChanged$.next(this.state);\r\n\t}\r\n}\r\n"]}