{"version":3,"file":"blocked-sequence-state.js","sourceRoot":"","sources":["../../../../../../../../../../packages/desktop-ui-lib/src/lib/offline-sync/concretes/states/sequence-queue-state/blocked-sequence-state.ts"],"names":[],"mappings":";;;AAAA,wBAA4C;AAC5C,iEAA6D;AAG7D,MAAa,oBAAqB,SAAQ,wBAAqB;IACvD,OAAO,CAAC,IAAe;QAC7B,IAAI,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,EAAE;YAC3B,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,IAAI,0BAAuB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SAC/D;QACD,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IACjC,CAAC;IACM,OAAO;QACb,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;IAC7B,CAAC;CACD;AAVD,oDAUC","sourcesContent":["import { InProgressSequenceState } from '.';\r\nimport { QueueState } from '../../../interfaces/queue-state';\r\nimport { ISequence } from '../../sequence-queue';\r\n\r\nexport class BlockedSequenceState extends QueueState<ISequence> {\r\n\tpublic enqueue(data: ISequence): void {\r\n\t\tif (this.context.isEmpty()) {\r\n\t\t\tthis.context.state = new InProgressSequenceState(this.context);\r\n\t\t}\r\n\t\tthis.context.queue.append(data);\r\n\t}\r\n\tpublic dequeue(): void {\r\n\t\tconsole.log('⭕️ - blocked');\r\n\t}\r\n}\r\n"]}