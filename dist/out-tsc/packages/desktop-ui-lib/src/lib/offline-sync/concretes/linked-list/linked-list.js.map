{"version":3,"file":"linked-list.js","sourceRoot":"","sources":["../../../../../../../../../packages/desktop-ui-lib/src/lib/offline-sync/concretes/linked-list/linked-list.ts"],"names":[],"mappings":"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","sourcesContent":["import { ILinkedList, ILinkedListNode } from '../../interfaces';\r\nimport { Node } from './node';\r\n\r\nexport class LinkedList<T> implements ILinkedList<T> {\r\n\tprivate _head: ILinkedListNode<T>;\r\n\tprivate _tail: ILinkedListNode<T>;\r\n\r\n\tconstructor() {\r\n\t\tthis._head = null;\r\n\t\tthis._tail = null;\r\n\t}\r\n\r\n\tpublic get size(): number {\r\n\t\treturn this.toArray().length;\r\n\t}\r\n\r\n\tpublic get tail(): ILinkedListNode<T> {\r\n\t\treturn this._tail;\r\n\t}\r\n\tpublic set tail(value: ILinkedListNode<T>) {\r\n\t\tthis._tail = value;\r\n\t}\r\n\r\n\tpublic get head(): ILinkedListNode<T> {\r\n\t\treturn this._head;\r\n\t}\r\n\tpublic set head(value: ILinkedListNode<T>) {\r\n\t\tthis._head = value;\r\n\t}\r\n\tpublic static arrayToLinkedList<T>(array: T[]): LinkedList<T> {\r\n\t\tconst linkedList = new LinkedList<T>();\r\n\t\tfor (const item of array) {\r\n\t\t\tlinkedList.append(item);\r\n\t\t}\r\n\t\treturn linkedList;\r\n\t}\r\n\r\n\tpublic search(data: T): ILinkedListNode<T> {\r\n\t\tlet temp = this.head;\r\n\t\twhile (temp) {\r\n\t\t\tif (temp.data === data) {\r\n\t\t\t\treturn temp;\r\n\t\t\t}\r\n\t\t\ttemp = temp.next;\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tpublic isEmpty(): boolean {\r\n\t\treturn this._head === null;\r\n\t}\r\n\tpublic toArray(): T[] {\r\n\t\tconst arr: T[] = [];\r\n\t\tlet current = this.head;\r\n\t\twhile (current !== null) {\r\n\t\t\tarr.push(current.data);\r\n\t\t\tcurrent = current.next;\r\n\t\t}\r\n\t\treturn arr;\r\n\t}\r\n\r\n\tpublic append(data: T): ILinkedListNode<T> {\r\n\t\tconst node = new Node(data);\r\n\t\tif (this.isEmpty()) {\r\n\t\t\tthis._head = node;\r\n\t\t\tthis._tail = node;\r\n\t\t} else {\r\n\t\t\tthis._tail.next = node;\r\n\t\t\tthis._tail = node;\r\n\t\t}\r\n\t\treturn node;\r\n\t}\r\n\r\n\tpublic prepend(data: T): ILinkedListNode<T> {\r\n\t\tconst node = new Node(data);\r\n\t\tif (this.isEmpty()) {\r\n\t\t\tthis._tail = node;\r\n\t\t} else {\r\n\t\t\tnode.next = this._head;\r\n\t\t}\r\n\t\tthis._head = node;\r\n\t\treturn node;\r\n\t}\r\n\r\n\tpublic shift(): ILinkedListNode<T> {\r\n\t\tif (this.isEmpty()) return null;\r\n\t\tconst node = this._head;\r\n\t\tif (this.head === this.tail) {\r\n\t\t\t// Only one node in the linked list\r\n\t\t\tthis.head = null;\r\n\t\t\tthis.tail = null;\r\n\t\t} else {\r\n\t\t\tthis.head = this.head.next;\r\n\t\t}\r\n\r\n\t\treturn node;\r\n\t}\r\n\r\n\tpublic pop(): ILinkedListNode<T> {\r\n\t\tif (this.isEmpty()) return null;\r\n\t\tconst node = this.tail;\r\n\t\tif (this.head === this.tail) {\r\n\t\t\t// Only one node in the linked list\r\n\t\t\tthis.head = null;\r\n\t\t\tthis.tail = null;\r\n\t\t} else {\r\n\t\t\tlet current = this.head;\r\n\t\t\twhile (current.next !== this.tail) {\r\n\t\t\t\tcurrent = current.next;\r\n\t\t\t}\r\n\t\t\tcurrent.next = null;\r\n\t\t\tthis.tail = current;\r\n\t\t}\r\n\t\treturn node;\r\n\t}\r\n\r\n\tpublic remove(data: T): void {\r\n\t\tif (this.isEmpty()) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (this.head.data === data) {\r\n\t\t\tthis.head = this.head.next;\r\n\t\t\tif (this.isEmpty()) {\r\n\t\t\t\tthis.tail = null;\r\n\t\t\t}\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet current = this.head;\r\n\t\twhile (current.next !== null) {\r\n\t\t\tif (current.next.data === data) {\r\n\t\t\t\tcurrent.next = current.next.next;\r\n\t\t\t\tif (current.next === null) {\r\n\t\t\t\t\tthis.tail = current;\r\n\t\t\t\t}\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tcurrent = current.next;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic toString(): string {\r\n\t\tlet temp = this.head;\r\n\t\tlet result = '';\r\n\t\twhile (temp) {\r\n\t\t\tresult += `${temp.data} -> `;\r\n\t\t\ttemp = temp.next;\r\n\t\t}\r\n\t\tresult += 'null';\r\n\t\treturn result;\r\n\t}\r\n}\r\n"]}