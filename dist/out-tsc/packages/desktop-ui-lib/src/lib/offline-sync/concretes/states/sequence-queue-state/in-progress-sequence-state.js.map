{"version":3,"file":"in-progress-sequence-state.js","sourceRoot":"","sources":["../../../../../../../../../../packages/desktop-ui-lib/src/lib/offline-sync/concretes/states/sequence-queue-state/in-progress-sequence-state.ts"],"names":[],"mappings":";;;AAAA,iEAA6D;AAE7D,yEAAoE;AAEpE,MAAa,uBAAwB,SAAQ,wBAAqB;IAC1D,OAAO,CAAC,IAAe;QAC7B,IAAI,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,EAAE;YAC3B,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,IAAI,uBAAuB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SAC/D;QACD,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IACjC,CAAC;IACM,KAAK,CAAC,OAAO;QACnB,IAAI,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,EAAE;YAC3B,OAAO;SACP;QACD,MAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC;QAChD,IAAI,OAAO,EAAE;YACZ,MAAM,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;SACxC;QACD,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE;YAC1C,CAAC,CAAC,IAAI,iDAAsB,CAAC,IAAI,CAAC,OAAO,CAAC;YAC1C,CAAC,CAAC,IAAI,uBAAuB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAC9C,CAAC;CACD;AAnBD,0DAmBC","sourcesContent":["import { QueueState } from '../../../interfaces/queue-state';\r\nimport { ISequence } from '../../sequence-queue';\r\nimport { CompletedSequenceState } from './completed-sequence-state';\r\n\r\nexport class InProgressSequenceState extends QueueState<ISequence> {\r\n\tpublic enqueue(data: ISequence): void {\r\n\t\tif (this.context.isEmpty()) {\r\n\t\t\tthis.context.state = new InProgressSequenceState(this.context);\r\n\t\t}\r\n\t\tthis.context.queue.append(data);\r\n\t}\r\n\tpublic async dequeue(): Promise<void> {\r\n\t\tif (this.context.isEmpty()) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tconst shifted = this.context.queue.shift().data;\r\n\t\tif (shifted) {\r\n\t\t\tawait this.context.synchronize(shifted);\r\n\t\t}\r\n\t\tthis.context.state = this.context.isEmpty()\r\n\t\t\t? new CompletedSequenceState(this.context)\r\n\t\t\t: new InProgressSequenceState(this.context);\r\n\t}\r\n}\r\n"]}