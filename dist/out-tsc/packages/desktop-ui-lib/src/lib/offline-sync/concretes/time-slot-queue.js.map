{"version":3,"file":"time-slot-queue.js","sourceRoot":"","sources":["../../../../../../../../packages/desktop-ui-lib/src/lib/offline-sync/concretes/time-slot-queue.ts"],"names":[],"mappings":"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","sourcesContent":["import { IScreenshot, ITimeSlot } from '@gauzy/contracts';\r\nimport { defer, timer, repeat, concatMap, of } from 'rxjs';\r\nimport { BACKGROUND_SYNC_OFFLINE_INTERVAL } from '../../constants/app.constants';\r\nimport { ElectronService } from '../../electron/services';\r\nimport { Store } from '../../services';\r\nimport { TimeTrackerService } from '../../time-tracker/time-tracker.service';\r\nimport { OfflineQueue } from '../interfaces/offline-queue';\r\nimport { TimeSlotQueueService } from '../time-slot-queue.service';\r\nimport { BlockedTimeSlotState, CompletedTimeSlotState } from './states';\r\n\r\nexport class TimeSlotQueue extends OfflineQueue<ITimeSlot> {\r\n\tconstructor(\r\n\t\tprivate _timeTrackerService: TimeTrackerService,\r\n\t\tprivate _timeSlotQueueService: TimeSlotQueueService,\r\n\t\tprivate _electronService: ElectronService,\r\n\t\tprivate _store: Store\r\n\t) {\r\n\t\tsuper();\r\n\t\tthis.state = new BlockedTimeSlotState(this);\r\n\t}\r\n\tpublic async synchronize(interval: ITimeSlot): Promise<void> {\r\n\t\tconst screenshots = interval.screenshots;\r\n\t\tconsole.log('prepare backup', interval);\r\n\t\tconst activities: any = await this._timeTrackerService.pushToTimeSlot({\r\n\t\t\t...interval,\r\n\t\t\trecordedAt: interval.startedAt,\r\n\t\t\torganizationId: this._store.organizationId,\r\n\t\t\ttenantId: this._store.tenantId,\r\n\t\t});\r\n\t\tconsole.log('backup', activities);\r\n\t\tconst timeSlotId = activities.id;\r\n\t\tawait this._uploadScreenshots(screenshots, interval, timeSlotId);\r\n\t\tawait this._electronService.ipcRenderer.invoke(\r\n\t\t\t'UPDATE_SYNCED',\r\n\t\t\t{ ...interval, remoteId: timeSlotId }\r\n\t\t)\r\n\t\tawait this._electronService.ipcRenderer.invoke('UPDATE_SYNCED_TIMER', {\r\n\t\t\tid: interval.timerId,\r\n\t\t\ttimeSlotId\r\n\t\t});\r\n\t\tthis._timeSlotQueueService.updater = { ...interval, timeSlotId };\r\n\t}\r\n\r\n\t// upload screenshot to timeslot api\r\n\tprivate async _uploadScreenshots(\r\n\t\tscreenshots: IScreenshot[],\r\n\t\tinterval: ITimeSlot,\r\n\t\ttimeSlotId: string\r\n\t): Promise<void> {\r\n\t\ttry {\r\n\t\t\tawait Promise.all(\r\n\t\t\t\tscreenshots.map(async (screenshot) => {\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tconst resImg =\r\n\t\t\t\t\t\t\tawait this._timeTrackerService.uploadImages(\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t...interval,\r\n\t\t\t\t\t\t\t\t\trecordedAt: interval.startedAt,\r\n\t\t\t\t\t\t\t\t\ttimeSlotId,\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tb64Img: screenshot.b64img,\r\n\t\t\t\t\t\t\t\t\tfileName: screenshot.fileName,\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\tconsole.log('Result upload', resImg);\r\n\t\t\t\t\t\treturn resImg;\r\n\t\t\t\t\t} catch (error) {\r\n\t\t\t\t\t\tconsole.log('On upload Image', error);\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t);\r\n\t\t} catch (error) {\r\n\t\t\tconsole.log('Backup-error', error);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic process(): Promise<void> {\r\n\t\treturn new Promise<void>((resolve) => {\r\n\t\t\t// Create an observable to process the queue\r\n\t\t\tconst process$ = defer(() => of(true)).pipe(\r\n\t\t\t\tconcatMap(() => this.dequeue()),\r\n\t\t\t\trepeat({\r\n\t\t\t\t\tdelay: () => timer(BACKGROUND_SYNC_OFFLINE_INTERVAL),\r\n\t\t\t\t})\r\n\t\t\t);\r\n\r\n\t\t\t// Subscribe to the observable\r\n\t\t\tconst subscription = process$.subscribe({\r\n\t\t\t\tnext: () => console.log('âœ… - Time slot done')\r\n\t\t\t});\r\n\r\n\t\t\t// Unsubscribe and resolve the promise when the queue is completed\r\n\t\t\tthis.state$.subscribe((state) => {\r\n\t\t\t\tconsole.log('[Subscription]', this.queue.toString());\r\n\t\t\t\tif (state instanceof CompletedTimeSlotState) {\r\n\t\t\t\t\tsubscription.unsubscribe();\r\n\t\t\t\t\tresolve();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n}\r\n"]}