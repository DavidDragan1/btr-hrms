{"version":3,"file":"sequence-queue.js","sourceRoot":"","sources":["../../../../../../../../packages/desktop-ui-lib/src/lib/offline-sync/concretes/sequence-queue.ts"],"names":[],"mappings":"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","sourcesContent":["import { ITimeSlot } from '@gauzy/contracts';\r\nimport { asapScheduler, concatMap, defer, of, repeat, timer as synchronizer } from 'rxjs';\r\nimport { TimeSlotQueueService } from '../time-slot-queue.service';\r\nimport { ElectronService } from '../../electron/services';\r\nimport { ErrorHandlerService, Store } from '../../services';\r\nimport { TimeTrackerStatusService } from '../../time-tracker/time-tracker-status/time-tracker-status.service';\r\nimport { TimeTrackerService } from '../../time-tracker/time-tracker.service';\r\nimport { TimeSlotQueue } from './time-slot-queue';\r\nimport { OfflineQueue } from '../interfaces/offline-queue';\r\nimport { BlockedSequenceState, CompletedSequenceState, InProgressSequenceState } from './states';\r\nimport { BACKGROUND_SYNC_OFFLINE_INTERVAL } from '../../constants/app.constants';\r\n\r\nexport interface ISequence {\r\n\ttimer: any;\r\n\tintervals: ITimeSlot[];\r\n}\r\n\r\n/**\r\n * SequenceQueue\r\n */\r\nexport class SequenceQueue extends OfflineQueue<ISequence> {\r\n\tconstructor(\r\n\t\tprotected _electronService: ElectronService,\r\n\t\tprotected _errorHandlerService: ErrorHandlerService,\r\n\t\tprotected _store: Store,\r\n\t\tprotected _timeSlotQueueService: TimeSlotQueueService,\r\n\t\tprotected _timeTrackerService: TimeTrackerService,\r\n\t\tprotected _timeTrackerStatusService: TimeTrackerStatusService\r\n\t) {\r\n\t\tsuper();\r\n\t\tthis.state = new BlockedSequenceState(this);\r\n\t}\r\n\r\n\tpublic async synchronize({ timer, intervals }: ISequence): Promise<void> {\r\n\t\ttry {\r\n\t\t\tconsole.log('üõ† - Preprocessing time slot');\r\n\t\t\tconst params = {\r\n\t\t\t\tnote: timer.note,\r\n\t\t\t\torganizationContactId: timer.organizationContactId,\r\n\t\t\t\ttaskId: timer.taskId,\r\n\t\t\t\tprojectId: timer.projectId,\r\n\t\t\t\torganizationId: this._store.organizationId,\r\n\t\t\t\ttenantId: this._store.tenantId\r\n\t\t\t};\r\n\r\n\t\t\tlet latest = null;\r\n\r\n\t\t\tif (timer.isStartedOffline) {\r\n\t\t\t\tconsole.log('‚è± - Silent start');\r\n\t\t\t\tlatest = await this._timeTrackerService.toggleApiStart({\r\n\t\t\t\t\t...timer,\r\n\t\t\t\t\t...params\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tconsole.log('üõ† - Create queue');\r\n\r\n\t\t\t// Create the queue\r\n\t\t\tconst timeSlotQueue = new TimeSlotQueue(\r\n\t\t\t\tthis._timeTrackerService,\r\n\t\t\t\tthis._timeSlotQueueService,\r\n\t\t\t\tthis._electronService,\r\n\t\t\t\tthis._store\r\n\t\t\t);\r\n\r\n\t\t\t// append data to queue;\r\n\t\t\tif (intervals.length > 0) {\r\n\t\t\t\tfor (const interval of intervals) timeSlotQueue.enqueue(interval);\r\n\t\t\t\tintervals = []; // empty the array\r\n\t\t\t\tconsole.log('üèó - Begin processing time slot queue');\r\n\t\t\t\t// Begin processing\r\n\t\t\t\tawait timeSlotQueue.process();\r\n\t\t\t\tconsole.log('‚úÖ - End processing time slot queue');\r\n\t\t\t\t// End processing\r\n\t\t\t}\r\n\r\n\t\t\tif (timer.isStoppedOffline) {\r\n\t\t\t\tconsole.log('‚è± - Silent stop');\r\n\t\t\t\tlatest = await this._timeTrackerService.toggleApiStop({\r\n\t\t\t\t\t...timer,\r\n\t\t\t\t\t...params\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tconst status = await this._timeTrackerStatusService.status();\r\n\r\n\t\t\tasapScheduler.schedule(async () => {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tawait this._electronService.ipcRenderer.invoke('UPDATE_SYNCED_TIMER', {\r\n\t\t\t\t\t\tlastTimer: latest\r\n\t\t\t\t\t\t\t? latest\r\n\t\t\t\t\t\t\t: {\r\n\t\t\t\t\t\t\t\t\t...timer,\r\n\t\t\t\t\t\t\t\t\tid: status.lastLog.id\r\n\t\t\t\t\t\t\t  },\r\n\t\t\t\t\t\t...timer\r\n\t\t\t\t\t});\r\n\t\t\t\t\tconsole.log('‚è± - local database updated');\r\n\t\t\t\t} catch (error) {\r\n\t\t\t\t\tconsole.error('üö® - Error updating local database', error);\r\n\t\t\t\t\tthis._errorHandlerService.handleError(error);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error('üö® - Error processing time slot queue', error);\r\n\t\t\tthis._timeSlotQueueService.viewQueueStateUpdater = {\r\n\t\t\t\tsize: this.queue.size,\r\n\t\t\t\tinProgress: false\r\n\t\t\t};\r\n\t\t}\r\n\t}\r\n\r\n\tpublic process(): Promise<void> {\r\n\t\tconsole.log('üöÄ - Sequence processing started');\r\n\r\n\t\treturn new Promise<void>((resolve) => {\r\n\t\t\t// Create an observable to process the queue\r\n\t\t\tconst process$ = defer(() => of(true)).pipe(\r\n\t\t\t\tconcatMap(() => this.dequeue()),\r\n\t\t\t\trepeat({\r\n\t\t\t\t\tdelay: () => synchronizer(BACKGROUND_SYNC_OFFLINE_INTERVAL)\r\n\t\t\t\t})\r\n\t\t\t);\r\n\r\n\t\t\tconsole.log('üöÄ - Sequence processing observable created');\r\n\r\n\t\t\t// Subscribe to the observable\r\n\t\t\tconst subscription = process$.subscribe({\r\n\t\t\t\tnext: () => console.log('‚úÖ - Sequence done')\r\n\t\t\t});\r\n\r\n\t\t\tconsole.log('üöÄ - Sequence processing observable subscribed');\r\n\r\n\t\t\t// Unsubscribe and resolve the promise when the queue is completed\r\n\t\t\tthis.state$.subscribe((state) => {\r\n\t\t\t\tconsole.log('üöÄ - Sequence state updated');\r\n\r\n\t\t\t\tthis._timeSlotQueueService.viewQueueStateUpdater = {\r\n\t\t\t\t\tsize: this.queue.size,\r\n\t\t\t\t\tinProgress: state instanceof InProgressSequenceState\r\n\t\t\t\t};\r\n\r\n\t\t\t\tif (state instanceof CompletedSequenceState) {\r\n\t\t\t\t\tconsole.log('üöÄ - Sequence processing completed');\r\n\t\t\t\t\tsubscription.unsubscribe();\r\n\t\t\t\t\tresolve();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n}\r\n"]}