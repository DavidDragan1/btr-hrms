{"version":3,"file":"activity-watch.component.js","sourceRoot":"","sources":["../../../../../../../../../packages/desktop-ui-lib/src/lib/integrations/activity-watch/view/activity-watch.component.ts"],"names":[],"mappings":";;;;AAAA,wCAA0C;AAE1C,gFAA0E;AAOnE,IAAM,sBAAsB,oCAA5B,MAAM,sBAAsB;IAClC,YAA6B,wBAAkD;QAAlD,6BAAwB,GAAxB,wBAAwB,CAA0B;IAAG,CAAC;IAEnF,IAAW,eAAe;QACzB,OAAO,IAAI,CAAC,wBAAwB,CAAC,eAAe,CAAC,YAAY,EAAE,CAAC;IACrE,CAAC;IAEM,KAAK,CAAC,gBAAgB,CAAC,SAAkB;QAC/C,IAAI,CAAC,wBAAwB,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IACnD,CAAC;IAED,IAAW,GAAG;QACb,OAAO,IAAI,CAAC,wBAAwB,CAAC,GAAG,CAAC,YAAY,EAAE,CAAC;IACzD,CAAC;IAED,IAAW,IAAI;QACd,OAAO,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC;IAC1D,CAAC;IAED,IAAW,OAAO;QACjB,OAAO,IAAI,CAAC,wBAAwB,CAAC,OAAO,CAAC,YAAY,EAAE,CAAC;IAC7D,CAAC;IAED,IAAW,KAAK;QACf,OAAO,IAAI,CAAC,wBAAwB,CAAC,KAAK,CAAC,YAAY,EAAE,CAAC;IAC3D,CAAC;CACD,CAAA;iCA1BY,sBAAsB;IALlC,IAAA,gBAAS,EAAC;QACV,QAAQ,EAAE,sBAAsB;QAChC,WAAW,EAAE,iCAAiC;QAC9C,SAAS,EAAE,CAAC,iCAAiC,CAAC;KAC9C,CAAC;6CAEsD,sDAAwB;GADnE,sBAAsB,CA0BlC","sourcesContent":["import { Component } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { ActivityWatchViewService } from '../activity-watch-view.service';\r\n\r\n@Component({\r\n\tselector: 'gauzy-activity-watch',\r\n\ttemplateUrl: './activity-watch.component.html',\r\n\tstyleUrls: ['./activity-watch.component.scss']\r\n})\r\nexport class ActivityWatchComponent {\r\n\tconstructor(private readonly activityWatchViewService: ActivityWatchViewService) {}\r\n\r\n\tpublic get isTimerRunning$(): Observable<boolean> {\r\n\t\treturn this.activityWatchViewService.isTimerRunning$.asObservable();\r\n\t}\r\n\r\n\tpublic async setActivityWatch(isChecked: boolean): Promise<void> {\r\n\t\tthis.activityWatchViewService.aw$.next(isChecked);\r\n\t}\r\n\r\n\tpublic get aw$(): Observable<boolean> {\r\n\t\treturn this.activityWatchViewService.aw$.asObservable();\r\n\t}\r\n\r\n\tpublic get log$(): Observable<string> {\r\n\t\treturn this.activityWatchViewService.log$.asObservable();\r\n\t}\r\n\r\n\tpublic get status$(): Observable<string> {\r\n\t\treturn this.activityWatchViewService.status$.asObservable();\r\n\t}\r\n\r\n\tpublic get icon$(): Observable<string> {\r\n\t\treturn this.activityWatchViewService.icon$.asObservable();\r\n\t}\r\n}\r\n"]}