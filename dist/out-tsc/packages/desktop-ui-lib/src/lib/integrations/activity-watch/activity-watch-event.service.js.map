{"version":3,"file":"activity-watch-event.service.js","sourceRoot":"","sources":["../../../../../../../../packages/desktop-ui-lib/src/lib/integrations/activity-watch/activity-watch-event.service.ts"],"names":[],"mappings":";;;;AAAA,wCAA2C;AAE3C,+BAAsC;AACtC,+CAA4D;AAC5D,+CAAkD;AAQlD,+DAA0D;AAC1D,iDAAgD;AAOzC,IAAM,yBAAyB,uCAA/B,MAAM,yBAAyB;IACrC,YAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;IAAG,CAAC;IAEhC,OAAO;QACd,OAAO,IAAA,qBAAc,EAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAkC,GAAG,qCAAyB,GAAG,CAAC,CAAC,CAAC;IACxG,CAAC;IAEO,KAAK,CAAC,aAAa,CAAe,MAAkB,EAAE,KAAiB;QAC9E,MAAM,MAAM,GAAG,IAAA,iBAAQ,EAAC;YACvB,KAAK,EAAE,KAAK,CAAC,KAAK,CAAC,WAAW,EAAE;YAChC,GAAG,EAAE,KAAK,CAAC,GAAG,CAAC,WAAW,EAAE;SAC5B,CAAC,CAAC;QACH,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QAC7C,IAAI,CAAC,QAAQ;YAAE,OAAO,EAAE,CAAC;QACzB,OAAO,IAAA,qBAAc,EACpB,IAAI,CAAC,IAAI,CAAC,GAAG,CAAiB,GAAG,qCAAyB,IAAI,QAAQ,SAAS,EAAE;YAChF,MAAM;SACN,CAAC,CACF,CAAC;IACH,CAAC;IAEO,KAAK,CAAC,QAAQ,CAAC,MAAkB;QACxC,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,OAAO,EAAE,CAAC;QACrC,IAAI,CAAC,OAAO;YAAE,OAAO,IAAI,CAAC;QAC1B,OAAO,uCAAiB,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,EAAE,EAAE,CAAC;IAC5D,CAAC;IAEM,KAAK,CAAC,gBAAgB,CAAC,KAAiB;QAC9C,OAAO,IAAI,CAAC,aAAa,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;IAC/C,CAAC;IAEM,KAAK,CAAC,mBAAmB,CAAC,KAAiB;QACjD,OAAO,IAAI,CAAC,aAAa,CAAC,cAAc,EAAE,KAAK,CAAC,CAAC;IAClD,CAAC;IAEM,KAAK,CAAC,oBAAoB,CAAC,KAAiB;QAClD,OAAO,IAAI,CAAC,aAAa,CAAC,eAAe,EAAE,KAAK,CAAC,CAAC;IACnD,CAAC;IAEM,KAAK,CAAC,oBAAoB,CAAC,KAAiB;QAClD,OAAO,IAAI,CAAC,aAAa,CAAC,cAAc,EAAE,KAAK,CAAC,CAAC;IAClD,CAAC;IAEM,KAAK,CAAC,IAAI;QAChB,IAAI;YACH,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,OAAO,EAAE,CAAC;YACrC,OAAO,CAAC,CAAC,OAAO,CAAC;SACjB;QAAC,OAAO,CAAC,EAAE;YACX,OAAO,KAAK,CAAC;SACb;IACF,CAAC;IAEM,iBAAiB,CAAC,KAAiB;QACzC,OAAO,IAAI,CAAC,aAAa,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;IAChD,CAAC;CACD,CAAA;oCAvDY,yBAAyB;IAHrC,IAAA,iBAAU,EAAC;QACX,UAAU,EAAE,MAAM;KAClB,CAAC;6CAEyB,iBAAU;GADxB,yBAAyB,CAuDrC","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { IActivityWatchEventService } from './i-activity-watch';\r\nimport { firstValueFrom } from 'rxjs';\r\nimport { API_ACTIVITY_WATCH_PREFIX } from '../../constants';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport {\r\n\tIActivityWatchAfkEvent,\r\n\tIActivityWatchBucketWatcherList,\r\n\tIActivityWatchWebEvent,\r\n\tIActivityWatchWindowEvent,\r\n\tIDateRange\r\n} from '@gauzy/contracts';\r\nimport { ActivityWatchUtil } from './activity-watch.util';\r\nimport { toParams } from '@gauzy/ui-sdk/common';\r\n\r\ntype BucketType = keyof ReturnType<(typeof ActivityWatchUtil)['parseBuckets']>;\r\n\r\n@Injectable({\r\n\tprovidedIn: 'root'\r\n})\r\nexport class ActivityWatchEventService implements IActivityWatchEventService {\r\n\tconstructor(private http: HttpClient) {}\r\n\r\n\tprivate buckets(): Promise<IActivityWatchBucketWatcherList> {\r\n\t\treturn firstValueFrom(this.http.get<IActivityWatchBucketWatcherList>(`${API_ACTIVITY_WATCH_PREFIX}/`));\r\n\t}\r\n\r\n\tprivate async collectEvents<IBucketEvent>(bucket: BucketType, range: IDateRange): Promise<IBucketEvent[]> {\r\n\t\tconst params = toParams({\r\n\t\t\tstart: range.start.toISOString(),\r\n\t\t\tend: range.end.toISOString()\r\n\t\t});\r\n\t\tconst bucketId = await this.bucketId(bucket);\r\n\t\tif (!bucketId) return [];\r\n\t\treturn firstValueFrom(\r\n\t\t\tthis.http.get<IBucketEvent[]>(`${API_ACTIVITY_WATCH_PREFIX}/${bucketId}/events`, {\r\n\t\t\t\tparams\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n\r\n\tprivate async bucketId(bucket: BucketType): Promise<string> {\r\n\t\tconst buckets = await this.buckets();\r\n\t\tif (!buckets) return null;\r\n\t\treturn ActivityWatchUtil.parseBuckets(buckets)[bucket]?.id;\r\n\t}\r\n\r\n\tpublic async collectAfkEvents(range: IDateRange): Promise<IActivityWatchAfkEvent[]> {\r\n\t\treturn this.collectEvents('afkBucket', range);\r\n\t}\r\n\r\n\tpublic async collectChromeEvents(range: IDateRange): Promise<IActivityWatchWebEvent[]> {\r\n\t\treturn this.collectEvents('chromeBucket', range);\r\n\t}\r\n\r\n\tpublic async collectFirefoxEvents(range: IDateRange): Promise<IActivityWatchWebEvent[]> {\r\n\t\treturn this.collectEvents('firefoxBucket', range);\r\n\t}\r\n\r\n\tpublic async collectWindowsEvents(range: IDateRange): Promise<IActivityWatchWindowEvent[]> {\r\n\t\treturn this.collectEvents('windowBucket', range);\r\n\t}\r\n\r\n\tpublic async ping(): Promise<boolean> {\r\n\t\ttry {\r\n\t\t\tconst buckets = await this.buckets();\r\n\t\t\treturn !!buckets;\r\n\t\t} catch (_) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic collectEdgeEvents(range: IDateRange): Promise<IActivityWatchWebEvent[]> {\r\n\t\treturn this.collectEvents('edgeBucket', range);\r\n\t}\r\n}\r\n"]}