{"version":3,"file":"task-estimate.component.js","sourceRoot":"","sources":["../../../../../../../../../packages/desktop-ui-lib/src/lib/time-tracker/task-render/task-estimate/task-estimate.component.ts"],"names":[],"mappings":";;;;AAAA,wCAA+D;AAE/D,+BAAkC;AAClC,8CAAqC;AACrC,yDAAqE;AACrE,gDAAkD;AAQ3C,IAAM,qBAAqB,mCAA3B,MAAM,qBAAqB;IAMjC;QALO,WAAM,GAAG,KAAK,CAAC;QAMrB,IAAI,CAAC,MAAM,GAAG,IAAI,mBAAY,EAAU,CAAC;IAC1C,CAAC;IAED,IAAW,SAAS;QACnB,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CACrB,IAAA,eAAG,EAAC,CAAC,IAAiB,EAAE,EAAE,CAAC,IAAI,EAAE,QAAQ,CAAC,EAC1C,IAAA,8BAAc,EAAC,IAAI,CAAC,CACpB,CAAC;IACH,CAAC;IAED,IAAW,eAAe;QACzB,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CACrB,IAAA,eAAG,EACF,CAAC,IAAiB,EAAE,EAAE,CAAC,IAAI,EAAE,MAAM,KAAK,0BAAc,CAAC,SAAS,CAChE,EACD,IAAA,8BAAc,EAAC,IAAI,CAAC,CACpB,CAAC;IACH,CAAC;IAEM,MAAM,CAAC,KAAa;QAC1B,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YAAE,OAAO;QACjC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACzB,CAAC;CACD,CAAA;AA3BO;IADN,IAAA,YAAK,GAAE;sCACM,iBAAU;oDAAc;gCAJ1B,qBAAqB;IANjC,IAAA,4BAAY,EAAC,EAAE,eAAe,EAAE,IAAI,EAAE,CAAC;IACvC,IAAA,gBAAS,EAAC;QACV,QAAQ,EAAE,qBAAqB;QAC/B,WAAW,EAAE,gCAAgC;QAC7C,SAAS,EAAE,CAAC,gCAAgC,CAAC;KAC7C,CAAC;;GACW,qBAAqB,CA+BjC","sourcesContent":["import { Component, EventEmitter, Input } from '@angular/core';\r\nimport { ITaskRender } from '../task-render.component';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\r\nimport { TaskStatusEnum } from '@gauzy/contracts';\r\n\r\n@UntilDestroy({ checkProperties: true })\r\n@Component({\r\n\tselector: 'gauzy-task-estimate',\r\n\ttemplateUrl: './task-estimate.component.html',\r\n\tstyleUrls: ['./task-estimate.component.scss'],\r\n})\r\nexport class TaskEstimateComponent {\r\n\tpublic isEdit = false;\r\n\tpublic edited: EventEmitter<number>;\r\n\t@Input()\r\n\tpublic task$: Observable<ITaskRender>;\r\n\r\n\tconstructor() {\r\n\t\tthis.edited = new EventEmitter<number>();\r\n\t}\r\n\r\n\tpublic get estimate$(): Observable<number> {\r\n\t\treturn this.task$.pipe(\r\n\t\t\tmap((task: ITaskRender) => task?.estimate),\r\n\t\t\tuntilDestroyed(this)\r\n\t\t);\r\n\t}\r\n\r\n\tpublic get isEditDisabled$(): Observable<boolean> {\r\n\t\treturn this.task$.pipe(\r\n\t\t\tmap(\r\n\t\t\t\t(task: ITaskRender) => task?.status === TaskStatusEnum.COMPLETED\r\n\t\t\t),\r\n\t\t\tuntilDestroyed(this)\r\n\t\t);\r\n\t}\r\n\r\n\tpublic update(event: number): void {\r\n\t\tthis.isEdit = false;\r\n\t\tif (isNaN(Number(event))) return;\r\n\t\tthis.edited.emit(event);\r\n\t}\r\n}\r\n"]}