{"version":3,"file":"task-status.component.js","sourceRoot":"","sources":["../../../../../../../../../packages/desktop-ui-lib/src/lib/time-tracker/task-render/task-status/task-status.component.ts"],"names":[],"mappings":";;;;AAAA,wCAAgE;AAChE,oEAA4E;AAE5E,gDAA0C;AAE1C,8CAAqC;AACrC,yDAAqE;AAQ9D,IAAM,mBAAmB,iCAAzB,MAAM,mBAAoB,SAAQ,2CAAmB;IAI3D,YAA6B,KAAY;QACxC,KAAK,EAAE,CAAC;QADoB,UAAK,GAAL,KAAK,CAAO;QAExC,IAAI,CAAC,OAAO,GAAG,IAAI,mBAAY,EAAe,CAAC;IAChD,CAAC;IAED,IAAW,WAAW;QACrB,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CACrB,IAAA,eAAG,EAAC,CAAC,IAAiB,EAAE,EAAE,CAAC,IAAI,EAAE,UAAU,CAAC,EAC5C,IAAA,8BAAc,EAAC,IAAI,CAAC,CACpB,CAAC;IACH,CAAC;IAED,IAAW,OAAO;QACjB,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CACrB,IAAA,eAAG,EAAC,CAAC,IAAiB,EAAE,EAAE,CAAC,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC,EAChD,IAAA,8BAAc,EAAC,IAAI,CAAC,CACpB,CAAC;IACH,CAAC;IAEM,YAAY,CAAC,UAAuB;QAC1C,IAAI,CAAC,OAAO,GAAG;YACd,GAAG,IAAI,CAAC,IAAI;YACZ,MAAM,EAAE,UAAU,CAAC,IAAsB;YACzC,UAAU;SACV,CAAC;QACF,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IAC/B,CAAC;IAEM,QAAQ;QACd,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC;IACvC,CAAC;CACD,CAAA;8BAnCY,mBAAmB;IAN/B,IAAA,4BAAY,EAAC,EAAE,eAAe,EAAE,IAAI,EAAE,CAAC;IACvC,IAAA,gBAAS,EAAC;QACV,QAAQ,EAAE,mBAAmB;QAC7B,WAAW,EAAE,8BAA8B;QAC3C,SAAS,EAAE,CAAC,8BAA8B,CAAC;KAC3C,CAAC;6CAKmC,gBAAK;GAJ7B,mBAAmB,CAmC/B","sourcesContent":["import { Component, EventEmitter, OnInit } from '@angular/core';\r\nimport { ITaskRender, TaskRenderComponent } from '../task-render.component';\r\nimport { ITaskStatus, TaskStatusEnum } from '@gauzy/contracts';\r\nimport { Store } from '../../../services';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\r\n\r\n@UntilDestroy({ checkProperties: true })\r\n@Component({\r\n\tselector: 'gauzy-task-status',\r\n\ttemplateUrl: './task-status.component.html',\r\n\tstyleUrls: ['./task-status.component.scss'],\r\n})\r\nexport class TaskStatusComponent extends TaskRenderComponent implements OnInit {\r\n\tpublic statuses$: Observable<ITaskStatus[]>;\r\n\tpublic updated: EventEmitter<ITaskStatus>;\r\n\r\n\tconstructor(private readonly store: Store) {\r\n\t\tsuper();\r\n\t\tthis.updated = new EventEmitter<ITaskStatus>();\r\n\t}\r\n\r\n\tpublic get taskStatus$(): Observable<ITaskStatus> {\r\n\t\treturn this.task$.pipe(\r\n\t\t\tmap((task: ITaskRender) => task?.taskStatus),\r\n\t\t\tuntilDestroyed(this)\r\n\t\t);\r\n\t}\r\n\r\n\tpublic get status$(): Observable<string> {\r\n\t\treturn this.task$.pipe(\r\n\t\t\tmap((task: ITaskRender) => String(task?.status)),\r\n\t\t\tuntilDestroyed(this)\r\n\t\t);\r\n\t}\r\n\r\n\tpublic updateStatus(taskStatus: ITaskStatus) {\r\n\t\tthis.rowData = {\r\n\t\t\t...this.task,\r\n\t\t\tstatus: taskStatus.name as TaskStatusEnum,\r\n\t\t\ttaskStatus,\r\n\t\t};\r\n\t\tthis.updated.emit(taskStatus);\r\n\t}\r\n\r\n\tpublic ngOnInit(): void {\r\n\t\tthis.statuses$ = this.store.statuses$;\r\n\t}\r\n}\r\n"]}