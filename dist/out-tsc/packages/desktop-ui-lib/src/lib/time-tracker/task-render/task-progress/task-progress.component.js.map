{"version":3,"file":"task-progress.component.js","sourceRoot":"","sources":["../../../../../../../../../packages/desktop-ui-lib/src/lib/time-tracker/task-render/task-progress/task-progress.component.ts"],"names":[],"mappings":";;;;AAAA,wCAAkF;AAClF,oEAA+D;AAC/D,iDAAsD;AACtD,sFAAiF;AACjF,+BAAuC;AACvC,yDAAqE;AACrE,8CAAqC;AAQ9B,IAAM,qBAAqB,mCAA3B,MAAM,qBAAsB,SAAQ,2CAAmB;IAG7D;QACC,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,OAAO,GAAG,IAAI,mBAAY,EAAU,CAAC;QAC1C,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;IAC3B,CAAC;IAID,IAAW,YAAY;QACtB,OAAO,IAAI,CAAC,aAAa,CAAC;IAC3B,CAAC;IAED,IACW,YAAY,CAAC,KAA4B;QACnD,IAAI,KAAK,EAAE;YACV,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;SAC3B;IACF,CAAC;IAED,IAAW,cAAc;QACxB,OAAO,uBAAc,CAAC;IACvB,CAAC;IAED,IAAW,SAAS;QACnB,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CACrB,IAAA,eAAG,EAAC,CAAC,IAAI,EAAE,EAAE;YACZ,IAAI,IAAI,CAAC,IAAI,EAAE,QAAQ,KAAK,CAAC,EAAE;gBAC9B,OAAO,CAAC,CAAC;aACT;YACD,IAAI,IAAI,CAAC,IAAI,EAAE,QAAQ,GAAG,IAAI,CAAC,IAAI,EAAE,QAAQ,EAAE;gBAC9C,OAAO,GAAG,CAAC;aACX;YACD,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,QAAQ,GAAG,IAAI,CAAC,IAAI,EAAE,QAAQ,CAAC,GAAG,GAAG,CAAC,CAAC;QACtE,CAAC,CAAC,EACF,IAAA,8BAAc,EAAC,IAAI,CAAC,CACpB,CAAC;IACH,CAAC;IAEM,eAAe;QACrB,IAAI,CAAC,YAAY,EAAE,MAAM;aACvB,IAAI,CACJ,IAAA,UAAG,EAAC,CAAC,QAAgB,EAAE,EAAE;YACxB,IAAI,CAAC,OAAO,GAAG;gBACd,GAAG,IAAI,CAAC,IAAI;gBACZ,QAAQ;aACR,CAAC;YACF,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC7B,CAAC,CAAC,EACF,IAAA,8BAAc,EAAC,IAAI,CAAC,CACpB;aACA,SAAS,EAAE,CAAC;IACf,CAAC;CACD,CAAA;AAxCA;IAAC,IAAA,gBAAS,EAAC,cAAc,CAAC;sCACK,+CAAqB;6CAArB,+CAAqB;yDAInD;gCApBW,qBAAqB;IANjC,IAAA,4BAAY,EAAC,EAAE,eAAe,EAAE,IAAI,EAAE,CAAC;IACvC,IAAA,gBAAS,EAAC;QACV,QAAQ,EAAE,qBAAqB;QAC/B,WAAW,EAAE,gCAAgC;QAC7C,SAAS,EAAE,CAAC,gCAAgC,CAAC;KAC7C,CAAC;;GACW,qBAAqB,CAuDjC","sourcesContent":["import { AfterViewInit, Component, EventEmitter, ViewChild } from '@angular/core';\r\nimport { TaskRenderComponent } from '../task-render.component';\r\nimport { progressStatus } from '@gauzy/ui-sdk/common';\r\nimport { TaskEstimateComponent } from '../task-estimate/task-estimate.component';\r\nimport { Observable, tap } from 'rxjs';\r\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\r\nimport { map } from 'rxjs/operators';\r\n\r\n@UntilDestroy({ checkProperties: true })\r\n@Component({\r\n\tselector: 'gauzy-task-progress',\r\n\ttemplateUrl: './task-progress.component.html',\r\n\tstyleUrls: ['./task-progress.component.scss']\r\n})\r\nexport class TaskProgressComponent extends TaskRenderComponent implements AfterViewInit {\r\n\tpublic updated: EventEmitter<number>;\r\n\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.updated = new EventEmitter<number>();\r\n\t\tthis._taskEstimate = null;\r\n\t}\r\n\r\n\tprivate _taskEstimate: TaskEstimateComponent;\r\n\r\n\tpublic get taskEstimate(): TaskEstimateComponent {\r\n\t\treturn this._taskEstimate;\r\n\t}\r\n\r\n\t@ViewChild('taskEstimate')\r\n\tpublic set taskEstimate(value: TaskEstimateComponent) {\r\n\t\tif (value) {\r\n\t\t\tthis._taskEstimate = value;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic get progressStatus() {\r\n\t\treturn progressStatus;\r\n\t}\r\n\r\n\tpublic get progress$(): Observable<number> {\r\n\t\treturn this.task$.pipe(\r\n\t\t\tmap((task) => {\r\n\t\t\t\tif (this.task?.estimate === 0) {\r\n\t\t\t\t\treturn 0;\r\n\t\t\t\t}\r\n\t\t\t\tif (this.task?.duration > this.task?.estimate) {\r\n\t\t\t\t\treturn 100;\r\n\t\t\t\t}\r\n\t\t\t\treturn Math.floor((this.task?.duration / this.task?.estimate) * 100);\r\n\t\t\t}),\r\n\t\t\tuntilDestroyed(this)\r\n\t\t);\r\n\t}\r\n\r\n\tpublic ngAfterViewInit(): void {\r\n\t\tthis.taskEstimate?.edited\r\n\t\t\t.pipe(\r\n\t\t\t\ttap((estimate: number) => {\r\n\t\t\t\t\tthis.rowData = {\r\n\t\t\t\t\t\t...this.task,\r\n\t\t\t\t\t\testimate\r\n\t\t\t\t\t};\r\n\t\t\t\t\tthis.updated.emit(estimate);\r\n\t\t\t\t}),\r\n\t\t\t\tuntilDestroyed(this)\r\n\t\t\t)\r\n\t\t\t.subscribe();\r\n\t}\r\n}\r\n"]}