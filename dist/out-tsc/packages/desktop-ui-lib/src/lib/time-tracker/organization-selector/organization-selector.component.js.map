{"version":3,"file":"organization-selector.component.js","sourceRoot":"","sources":["../../../../../../../../packages/desktop-ui-lib/src/lib/time-tracker/organization-selector/organization-selector.component.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n\tComponent,\r\n\tOnInit,\r\n\tOutput,\r\n\tEventEmitter,\r\n\tAfterViewInit,\r\n\tNgZone,\r\n\tInput,\r\n} from '@angular/core';\r\nimport { IOrganization, IUser } from '@gauzy/contracts';\r\nimport { uniq } from 'underscore';\r\nimport { UserOrganizationService } from './user-organization.service';\r\nimport { ElectronService } from '../../electron/services';\r\n\r\n@Component({\r\n\tselector: 'ngx-desktop-timer-organization-selector',\r\n\ttemplateUrl: './organization-selector.component.html',\r\n\tstyleUrls: ['./organization-selector.component.scss'],\r\n})\r\nexport class OrganizationSelectorComponent implements OnInit, AfterViewInit {\r\n\r\n\tpublic organizations: IOrganization[] = [];\r\n\tpublic selectedOrganization: IOrganization;\r\n\r\n\t/* A getter and setter. */\r\n\tprivate _isDisabled: boolean;\r\n\tpublic get disabled(): boolean {\r\n\t\treturn this._isDisabled;\r\n\t}\r\n\t@Input() public set disabled(value: boolean) {\r\n\t\tthis._isDisabled = value;\r\n\t}\r\n\r\n\t/* A getter and setter. */\r\n\tprivate _user: IUser;\r\n\tpublic get user(): IUser {\r\n\t\treturn this._user;\r\n\t}\r\n\tpublic set user(value: IUser) {\r\n\t\tif (value) {\r\n\t\t\tthis._user = value;\r\n\t\t}\r\n\t}\r\n\r\n\t@Output() organizationChange: EventEmitter<IOrganization>;\r\n\r\n\tconstructor(\r\n\t\tprivate readonly _userOrganizationService: UserOrganizationService,\r\n\t\tprivate readonly _electronService: ElectronService,\r\n\t\tprivate readonly _ngZone: NgZone\r\n\t) {\r\n\t\tthis.organizationChange = new EventEmitter();\r\n\t\tthis._isDisabled = false;\r\n\t}\r\n\r\n\tngOnInit() { }\r\n\r\n\t/**\r\n\t * Component lifecycle hook for operations after the view initializes.\r\n\t */\r\n\tngAfterViewInit(): void {\r\n\t\t// Subscribe to Electron IPC events and handle in Angular's zone\r\n\t\tthis._electronService.ipcRenderer.on('timer_tracker_show', (event, arg) => {\r\n\t\t\tthis._ngZone.run(async () => {\r\n\t\t\t\ttry {\r\n\t\t\t\t\t// Fetch user details\r\n\t\t\t\t\tthis.user = await this._userOrganizationService.detail();\r\n\t\t\t\t\t// Load organizations for the user\r\n\t\t\t\t\tawait this.loadOrganizations();\r\n\t\t\t\t} catch (error) {\r\n\t\t\t\t\tconsole.error('Error handling IPC event:', error); // Log the error with context\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the selected organization and emits an event indicating that the organization has changed.\r\n\t *\r\n\t * @param organization The organization to select.\r\n\t */\r\n\tpublic selectOrganization(organization: IOrganization): void {\r\n\t\t// Ensure that a valid organization is provided\r\n\t\tif (!organization) {\r\n\t\t\tconsole.warn('No organization provided to select.');\r\n\t\t\treturn; // Exit early if organization is null or undefined\r\n\t\t}\r\n\r\n\t\t// Set the selected organization\r\n\t\tthis.selectedOrganization = organization;\r\n\r\n\t\t// Emit an event indicating the organization has changed\r\n\t\tif (this.organizationChange) {\r\n\t\t\tthis.organizationChange.emit(organization);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Load organizations for the current user and set the selected organization based on predefined conditions.\r\n\t *\r\n\t * This function fetches organizations from the `_userOrganizationService`, filters them based on the current user,\r\n\t * and sets the `selectedOrganization` property accordingly.\r\n\t *\r\n\t * @returns A promise that resolves when organizations are loaded.\r\n\t */\r\n\tprivate async loadOrganizations(): Promise<void> {\r\n\t\t// Return early if the user is not defined\r\n\t\tif (!this.user) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\tconst { id: userId, tenantId } = this.user;\r\n\r\n\t\t\t// Fetch all user organizations, including related 'organization' data\r\n\t\t\tconst { items = [] } = await this._userOrganizationService.getAll(['organization'], { userId, tenantId });\r\n\r\n\t\t\t// Extract organizations where the user ID matches\r\n\t\t\tconst organizations: IOrganization[] = items\r\n\t\t\t\t.map(({ organization, userId }) => (userId === this.user.id ? organization : null))\r\n\t\t\t\t.filter(Boolean); // Remove null values\r\n\r\n\t\t\t// Remove duplicate organizations by unique ID\r\n\t\t\tthis.organizations = uniq(organizations, (item: IOrganization) => item.id);\r\n\r\n\t\t\tif (this.organizations.length > 0) {\r\n\t\t\t\t// Find the default organization\r\n\t\t\t\tconst defaultOrganization = this.organizations.find(\r\n\t\t\t\t\t(organization) => organization.isDefault\r\n\t\t\t\t);\r\n\r\n\t\t\t\t// Select the first organization from the list\r\n\t\t\t\tconst [firstOrganization] = this.organizations;\r\n\r\n\t\t\t\tif (this.organizationId) {\r\n\t\t\t\t\t// Find the organization that matches the provided ID\r\n\t\t\t\t\tconst matchingOrganization = this.organizations.find(\r\n\t\t\t\t\t\t(organization) => organization.id === this.organizationId\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\t// Set the selected organization, fallback to default or first\r\n\t\t\t\t\tthis.selectedOrganization = matchingOrganization || defaultOrganization || firstOrganization;\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// If no specific ID, use default or first organization\r\n\t\t\t\t\tthis.selectedOrganization = defaultOrganization || firstOrganization;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error('Error loading organizations:', error); // Error handling\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Getter for the organization ID from the selected organization.\r\n\t *\r\n\t * This getter retrieves the 'id' of the selected organization if available.\r\n\t * If 'selectedOrganization' is not set, it returns `null`.\r\n\t *\r\n\t * @returns The organization ID or `null` if not available.\r\n\t */\r\n\tpublic get organizationId(): string | null {\r\n\t\t// Return the ID if 'selectedOrganization' is defined, otherwise return null\r\n\t\treturn this.selectedOrganization?.id ?? null;\r\n\t}\r\n}\r\n"]}