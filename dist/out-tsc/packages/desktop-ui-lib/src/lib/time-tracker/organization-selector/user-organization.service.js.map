{"version":3,"file":"user-organization.service.js","sourceRoot":"","sources":["../../../../../../../../packages/desktop-ui-lib/src/lib/time-tracker/organization-selector/user-organization.service.ts"],"names":[],"mappings":";;;;AAAA,+CAAkD;AAClD,wCAA2C;AAE3C,iDAAgD;AAChD,+BAAwD;AACxD,4FAAuF;AACvF,oGAA8F;AAC9F,iEAA2D;AAKpD,IAAM,uBAAuB,qCAA7B,MAAM,uBAAuB;IACnC,YACkB,8BAAyD,EACzD,6BAA2D,EAC3D,KAAiB;QAFjB,mCAA8B,GAA9B,8BAA8B,CAA2B;QACzD,kCAA6B,GAA7B,6BAA6B,CAA8B;QAC3D,UAAK,GAAL,KAAK,CAAY;IAChC,CAAC;IAEJ;;;;;;;OAOG;IACI,KAAK,CAAC,MAAM,CAClB,YAAsB,EAAE,EACxB,KAAkC,EAClC,kBAA2B,KAAK;QAEhC,+BAA+B;QAC/B,MAAM,MAAM,GAAG,EAAE,SAAS,EAAE,KAAK,EAAE,eAAe,EAAE,CAAC;QAErD,+CAA+C;QAC/C,IAAI,mBAAmB,GAAG,IAAI,CAAC,8BAA8B,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QAE9E,IAAI,CAAC,mBAAmB,EAAE;YACzB,iDAAiD;YACjD,mBAAmB,GAAG,IAAI,CAAC,KAAK;iBAC9B,GAAG,CAAiC,GAAG,0BAAU,oBAAoB,EAAE;gBACvE,MAAM,EAAE,IAAA,iBAAQ,EAAC,MAAM,CAAC;aACxB,CAAC;iBACD,IAAI,CACJ,IAAA,UAAG,EAAC,CAAC,QAAa,EAAE,EAAE,CAAC,QAAQ,CAAC,EAAE,sCAAsC;YACxE,IAAA,kBAAW,EAAC,CAAC,CAAC,CAAC,kCAAkC;aACjD,CAAC;YAEH,oCAAoC;YACpC,IAAI,CAAC,8BAA8B,CAAC,QAAQ,CAAC,mBAAmB,EAAE,KAAK,CAAC,CAAC;SACzE;QAED,2CAA2C;QAC3C,OAAO,MAAM,IAAA,qBAAc,EAAC,mBAAmB,CAAC,CAAC;IAClD,CAAC;IAED;;;;OAIG;IACI,KAAK,CAAC,MAAM;QAClB,4DAA4D;QAC5D,IAAI,KAAK,GAAG,IAAI,CAAC,6BAA6B,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QAE9D,mDAAmD;QACnD,IAAI,CAAC,KAAK,EAAE;YACX,MAAM,MAAM,GAAG,IAAA,iBAAQ,EAAC;gBACvB,SAAS,EAAE,CAAC,QAAQ,EAAE,MAAM,EAAE,sBAAsB,CAAC;gBACrD,eAAe,EAAE,IAAI;gBACrB,mBAAmB,EAAE,IAAI;aACzB,CAAC,CAAC;YAEH,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAQ,GAAG,0BAAU,UAAU,EAAE,EAAE,MAAM,EAAE,CAAC,CAAC,IAAI,CACtE,IAAA,UAAG,EAAC,CAAC,QAAa,EAAE,EAAE,CAAC,QAAQ,CAAC,EAChC,IAAA,kBAAW,EAAC,CAAC,CAAC,CACd,CAAC;YAEF,8CAA8C;YAC9C,IAAI,CAAC,6BAA6B,CAAC,QAAQ,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;SACzD;QAED,6CAA6C;QAC7C,OAAO,IAAA,qBAAc,EAAC,KAAK,CAAC,CAAC;IAC9B,CAAC;IAEM,KAAK,CAAC,uBAAuB,CAAC,KAAuB;QAC3D,MAAM,IAAA,qBAAc,EAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,0BAAU,0BAA0B,EAAE,KAAK,CAAC,CAAC,CAAC;IACtF,CAAC;CACD,CAAA;kCA9EY,uBAAuB;IAHnC,IAAA,iBAAU,EAAC;QACX,UAAU,EAAE,MAAM;KAClB,CAAC;6CAGiD,uDAAyB;QAC1B,8DAA4B;QACpD,iBAAU;GAJvB,uBAAuB,CA8EnC","sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { IPagination, IUser, IUserOrganization, IUserOrganizationFindInput, IUserUpdateInput } from '@gauzy/contracts';\r\nimport { toParams } from '@gauzy/ui-sdk/common';\r\nimport { firstValueFrom, map, shareReplay } from 'rxjs';\r\nimport { OrganizationsCacheService } from '../../services/organizations-cache.service';\r\nimport { UserOrganizationCacheService } from '../../services/user-organization-cache.service';\r\nimport { API_PREFIX } from '../../constants/app.constants';\r\n\r\n@Injectable({\r\n\tprovidedIn: 'root'\r\n})\r\nexport class UserOrganizationService {\r\n\tconstructor(\r\n\t\tprivate readonly _userOrganizationsCacheService: OrganizationsCacheService,\r\n\t\tprivate readonly _userOrganizationCacheService: UserOrganizationCacheService,\r\n\t\tprivate readonly _http: HttpClient\r\n\t) {}\r\n\r\n\t/**\r\n\t * Fetches all user organizations with optional relations, where conditions, and inclusion of employee information.\r\n\t *\r\n\t * @param relations Optional array of relation names to include.\r\n\t * @param where Optional filtering conditions.\r\n\t * @param includeEmployee Whether to include employee information.\r\n\t * @returns A promise resolving to an object with `items` and `total` representing user organizations and total count.\r\n\t */\r\n\tpublic async getAll(\r\n\t\trelations: string[] = [],\r\n\t\twhere?: IUserOrganizationFindInput,\r\n\t\tincludeEmployee: boolean = false\r\n\t): Promise<IPagination<IUserOrganization>> {\r\n\t\t// Construct request parameters\r\n\t\tconst params = { relations, where, includeEmployee };\r\n\r\n\t\t// Get cached observable for user organizations\r\n\t\tlet usersOrganizations$ = this._userOrganizationsCacheService.getValue('all');\r\n\r\n\t\tif (!usersOrganizations$) {\r\n\t\t\t// If no cached observable, fetch from the server\r\n\t\t\tusersOrganizations$ = this._http\r\n\t\t\t\t.get<IPagination<IUserOrganization>>(`${API_PREFIX}/user-organization`, {\r\n\t\t\t\t\tparams: toParams(params)\r\n\t\t\t\t})\r\n\t\t\t\t.pipe(\r\n\t\t\t\t\tmap((response: any) => response), // Map to ensure correct data handling\r\n\t\t\t\t\tshareReplay(1) // Cache the result for future use\r\n\t\t\t\t);\r\n\r\n\t\t\t// Store the observable in the cache\r\n\t\t\tthis._userOrganizationsCacheService.setValue(usersOrganizations$, 'all');\r\n\t\t}\r\n\r\n\t\t// Convert observable to promise and return\r\n\t\treturn await firstValueFrom(usersOrganizations$);\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves detailed information about the current user's details.\r\n\t *\r\n\t * @returns {Promise<IUser>} The user me details.\r\n\t */\r\n\tpublic async detail(): Promise<IUser> {\r\n\t\t// Check if the user organization details are already cached\r\n\t\tlet user$ = this._userOrganizationCacheService.getValue('me');\r\n\r\n\t\t// If not cached, fetch the details from the server\r\n\t\tif (!user$) {\r\n\t\t\tconst params = toParams({\r\n\t\t\t\trelations: ['tenant', 'role', 'role.rolePermissions'],\r\n\t\t\t\tincludeEmployee: true,\r\n\t\t\t\tincludeOrganization: true\r\n\t\t\t});\r\n\r\n\t\t\tuser$ = this._http.get<IUser>(`${API_PREFIX}/user/me`, { params }).pipe(\r\n\t\t\t\tmap((response: any) => response),\r\n\t\t\t\tshareReplay(1)\r\n\t\t\t);\r\n\r\n\t\t\t// Cache the fetched user organization details\r\n\t\t\tthis._userOrganizationCacheService.setValue(user$, 'me');\r\n\t\t}\r\n\r\n\t\t// Return the first value from the observable\r\n\t\treturn firstValueFrom(user$);\r\n\t}\r\n\r\n\tpublic async updatePreferredLanguage(input: IUserUpdateInput): Promise<void> {\r\n\t\tawait firstValueFrom(this._http.put(`${API_PREFIX}/user/preferred-language`, input));\r\n\t}\r\n}\r\n"]}