import { AfterViewInit, ElementRef, NgZone, OnInit, TemplateRef } from '@angular/core';
import { NbDialogService, NbIconLibraries, NbToastrService } from '@nebular/theme';
import { TimeTrackerService } from './time-tracker.service';
import { LocalDataSource, Angular2SmartTableComponent } from 'angular2-smart-table';
import { DomSanitizer } from '@angular/platform-browser';
import { BehaviorSubject, Observable } from 'rxjs';
import { ElectronService, LoggerService } from '../electron/services';
import 'moment-duration-format';
import { IOrganization, IOrganizationContact, IOrganizationTeam, ITask } from '@gauzy/contracts';
import { ErrorHandlerService, NativeNotificationService, Store, ToastrNotificationService } from '../services';
import { TimeTrackerStatusService } from './time-tracker-status/time-tracker-status.service';
import { TimeSlotQueueService, ViewQueueStateUpdater } from '../offline-sync';
import { ImageViewerService } from '../image-viewer/image-viewer.service';
import { AuthStrategy } from '../auth';
import { LanguageSelectorService } from '../language/language-selector.service';
import { TranslateService } from '@ngx-translate/core';
import { AlwaysOnService } from '../always-on/always-on.service';
import { ActivityWatchViewService } from '../integrations';
export declare class TimeTrackerComponent implements OnInit, AfterViewInit {
    private electronService;
    private timeTrackerService;
    private dialogService;
    private toastrService;
    private sanitize;
    private _ngZone;
    private iconLibraries;
    private _errorHandlerService;
    private _nativeNotifier;
    private _toastrNotifier;
    private _store;
    private _loggerService;
    private _timeTrackerStatus;
    private _timeSlotQueueService;
    private _imageViewerService;
    private _authStrategy;
    private _languageSelectorService;
    private _translateService;
    private _alwaysOnService;
    private readonly _environment;
    private readonly _activityWatchViewService;
    private _lastTotalWorkedToday$;
    private _lastTotalWorkedWeek$;
    private _permissions$;
    private _lastTime;
    private _isLockSyncProcess;
    private _startMode;
    private _isSpecialLogout;
    private _isRestartAndUpdate;
    private _isOpenDialog;
    private _dialog;
    private _timeZoneManager;
    private _remoteSleepLock;
    private _isReady;
    btnDialogOpen: ElementRef<HTMLElement>;
    start$: BehaviorSubject<boolean>;
    userData: any;
    organization: any;
    projectSelect: any;
    taskSelect: any;
    teamSelect: any;
    errors: any;
    note: String;
    todayDuration$: BehaviorSubject<any>;
    weeklyDuration$: BehaviorSubject<any>;
    userOrganization$: BehaviorSubject<any>;
    lastScreenCapture$: BehaviorSubject<any>;
    userPermission: any;
    quitApp: boolean;
    organizationContactId: any;
    employeeId: any;
    argFromMain: any;
    token: any;
    apiHost: any;
    screenshots$: BehaviorSubject<any>;
    selectedTimeSlot: any;
    lastTimeSlot: any;
    invalidTimeLog: any;
    loading: boolean;
    appSetting$: BehaviorSubject<any>;
    isExpand$: BehaviorSubject<boolean>;
    isCollapse$: BehaviorSubject<boolean>;
    dialogType: {
        deleteLog: {
            name: string;
            message: string;
        };
        changeClient: {
            name: string;
            message: string;
        };
        timeTrackingOption: {
            name: string;
            message: string;
        };
    };
    timerStatus: any;
    expandIcon: string;
    smartTableSettings: object;
    tableData: any[];
    isTrackingEnabled: boolean;
    isAddTask: boolean;
    sound: any;
    hasTaskPermission$: BehaviorSubject<boolean>;
    hasProjectPermission$: BehaviorSubject<boolean>;
    hasContactPermission$: BehaviorSubject<boolean>;
    constructor(electronService: ElectronService, timeTrackerService: TimeTrackerService, dialogService: NbDialogService, toastrService: NbToastrService, sanitize: DomSanitizer, _ngZone: NgZone, iconLibraries: NbIconLibraries, _errorHandlerService: ErrorHandlerService, _nativeNotifier: NativeNotificationService, _toastrNotifier: ToastrNotificationService, _store: Store, _loggerService: LoggerService, _timeTrackerStatus: TimeTrackerStatusService, _timeSlotQueueService: TimeSlotQueueService, _imageViewerService: ImageViewerService, _authStrategy: AuthStrategy, _languageSelectorService: LanguageSelectorService, _translateService: TranslateService, _alwaysOnService: AlwaysOnService, _environment: any, _activityWatchViewService: ActivityWatchViewService);
    private get _sourceData();
    private get _hasTaskPermission();
    private get _isOffline();
    private get _lastTotalWorkedToday();
    private get _lastTotalWorkedWeek();
    private _teams$;
    get teams$(): Observable<IOrganizationTeam[]>;
    get teams(): IOrganizationTeam[];
    get selectedTeam(): IOrganizationTeam;
    get tasks(): ITask[];
    get selectedTask(): ITask;
    private _taskTable;
    set taskTable(content: Angular2SmartTableComponent);
    private _timeRun$;
    get timeRun$(): Observable<string>;
    private _projects$;
    get projects$(): Observable<any>;
    private _tasks$;
    get tasks$(): Observable<any>;
    private _organizationContacts$;
    get organizationContacts$(): Observable<any>;
    private _sourceData$;
    get sourceData$(): Observable<LocalDataSource>;
    private _isOffline$;
    get isOffline$(): Observable<boolean>;
    private _inQueue$;
    get inQueue$(): Observable<ViewQueueStateUpdater>;
    private _isRefresh$;
    get isRefresh$(): Observable<boolean>;
    private _weeklyLimit$;
    get weeklyLimit$(): Observable<number>;
    private _isOver$;
    get isOver$(): Observable<boolean>;
    get start(): boolean;
    get todayDuration(): any;
    get userOrganization(): any;
    get lastScreenCapture(): any;
    get screenshots(): any[];
    get appSetting(): any;
    get isExpand(): boolean;
    get inQueue(): ViewQueueStateUpdater;
    /**
     * It returns the project that matches the projectSelect value
     * @returns The project that matches the projectSelect id.
     */
    get selectedProject(): any;
    get _weeklyLimit(): number;
    get isRemoteTimer(): boolean;
    private resetAtMidnight;
    private merge;
    private countDuration;
    private _deleteSyncedTimeslot;
    /**
     * Check if user have required authorization to use time tracker
     */
    private _passedAllAuthorizations;
    private _onChangedSource;
    private _clearItem;
    private _mappingScreenshots;
    private _toggle;
    private _loadSmartTableSettings;
    private loadStatuses;
    ngOnInit(): void;
    xor(a: boolean, b: boolean): boolean;
    ngAfterViewInit(): void;
    toggleStart(val: any, onClick?: boolean): Promise<void>;
    setTime({ second }: {
        second: any;
    }): Promise<void>;
    startTimer(onClick?: boolean): Promise<void>;
    stopTimer(onClick?: boolean, isEmergency?: boolean): Promise<void>;
    getTask(arg: any): Promise<void>;
    getProjects(arg: any): Promise<void>;
    getClient(arg: any): Promise<void>;
    getTimerStatus(arg: any): Promise<void>;
    setClient(item: any, dialog: any): Promise<void>;
    selectClient(item: string): Promise<void>;
    setProject(item: string): Promise<void>;
    setTask(item: string): void;
    descriptionChange(e: any): void;
    validationField(): boolean;
    errorBind(): void;
    doShoot(): void;
    determineScreenshot(screenSize: any): {
        width: number;
        height: number;
    };
    getTodayTime(arg: any, isForcedSync?: boolean): Promise<void>;
    getLastTimeSlotImage(arg: any): Promise<void>;
    localImage(img: any, originalBase64Image?: string): Promise<void>;
    updateImageUrl(e?: string): void;
    setTimerDetails(): Promise<void>;
    showImage(): void;
    open(dialog: TemplateRef<any>, option: any): void;
    deleteTimeSlot(): Promise<void>;
    removeInvalidTimeLog(arg: any): Promise<void>;
    openSetting(): void;
    expand(): void;
    handleRowSelection(selectionEvent: any): void;
    private isNoRowSelected;
    private clearSelectedTaskAndRefresh;
    private handleSelectedTaskChange;
    private isDifferentTask;
    onSearch(query?: string): void;
    getScreenshot(arg: any, isThumb?: boolean | null): Promise<any>;
    sendActivities(arg: any): Promise<void>;
    screenshotNotify(arg: any, imgs: any[]): void;
    uploadsScreenshot(arg: any, imgs: any[], timeSlotId: string): Promise<Object>;
    convertToSlug(text: string): string;
    buffToB64(imgs: any): string;
    fileNameFormat(imgs: any): string;
    refreshTimer(): void;
    checkOnlineStatus(): boolean;
    addTask(): void;
    closeAddTask(): void;
    callbackNewTask(e: any): void;
    showErrorMessage(msg: any): void;
    toggle(event: boolean): void;
    /**
     * It takes a date and returns a string
     * @param {Date} date - The date to humanize
     * @returns A string
     */
    humanize(date: Date): string;
    addProject: (name: string) => Promise<void>;
    addNewTask: (title: ITask['title']) => Promise<void>;
    addContact: (name: IOrganizationContact['name']) => Promise<void>;
    selectOrganization(organization: IOrganization): void;
    noLimit(value: number): boolean;
    logout(): Promise<void>;
    restart(): Promise<void>;
    updateOrganizationTeamEmployee(): Promise<void>;
    getTeams(arg?: any): Promise<void>;
    setTeams(organizationTeamId: string): Promise<void>;
    private updateTaskStatus;
}
//# sourceMappingURL=time-tracker.component.d.ts.map