import { HttpClient } from '@angular/common/http';
import { IGetTasksStatistics, IOrganizationContact, IOrganizationContactCreateInput, IOrganizationProject, IOrganizationProjectCreateInput, IOrganizationTeam, IOrganizationTeamEmployee, ITaskPriority, ITaskSize, ITaskStatus, ITaskStatusFindInput, ITaskUpdateInput } from '@gauzy/contracts';
import { ClientCacheService, EmployeeCacheService, ProjectCacheService, Store, TaskCacheService, TaskPriorityCacheService, TaskSizeCacheService, TaskStatusCacheService, TeamsCacheService, TimeLogCacheService, TimeSlotCacheService } from '../services';
import { UserOrganizationService } from './organization-selector/user-organization.service';
import { LoggerService } from '../electron/services';
export declare class TimeTrackerService {
    private readonly http;
    private readonly _clientCacheService;
    private readonly _taskCacheService;
    private readonly _projectCacheService;
    private readonly _timeSlotCacheService;
    private readonly _employeeCacheService;
    private readonly _userOrganizationService;
    private readonly _timeLogService;
    private readonly _loggerService;
    private readonly _store;
    private readonly _taskStatusCacheService;
    private readonly _teamsCacheService;
    private readonly _taskPriorityCacheService;
    private readonly _taskSizeCacheService;
    token: string;
    userId: string;
    employeeId: string;
    constructor(http: HttpClient, _clientCacheService: ClientCacheService, _taskCacheService: TaskCacheService, _projectCacheService: ProjectCacheService, _timeSlotCacheService: TimeSlotCacheService, _employeeCacheService: EmployeeCacheService, _userOrganizationService: UserOrganizationService, _timeLogService: TimeLogCacheService, _loggerService: LoggerService, _store: Store, _taskStatusCacheService: TaskStatusCacheService, _teamsCacheService: TeamsCacheService, _taskPriorityCacheService: TaskPriorityCacheService, _taskSizeCacheService: TaskSizeCacheService);
    createAuthorizationHeader(headers: Headers): void;
    getTasks(values: any): Promise<import("@gauzy/contracts").ITask[]>;
    getTasksStatistics(values: IGetTasksStatistics): Promise<import("@gauzy/contracts").ITask[]>;
    getEmployees(values: any): Promise<import("@gauzy/contracts").IEmployee>;
    getProjects(values: any): Promise<IOrganizationProject[]>;
    getClient(values: any): Promise<IOrganizationContact[]>;
    getUserDetail(): Promise<import("@gauzy/contracts").IUser>;
    getTimeLogs(values: any): Promise<import("@gauzy/contracts").ICountsStatistics>;
    getTimeSlot(values: any): Promise<import("@gauzy/contracts").ITimeSlot[]>;
    pingAw(host: any): Promise<string>;
    toggleApiStart(values: any): Promise<Object>;
    toggleApiStop(values: any): Promise<Object>;
    deleteTimeSlot(values: any): Promise<Object>;
    deleteTimeSlots(values: any): Promise<Object>;
    getInvalidTimeLog(values: any): Promise<Object>;
    deleteInvalidTimeLog(values: any): Promise<Object>;
    getTimerStatus(values: any): Promise<Object>;
    pushToTimeSlot(values: any): Promise<Object>;
    uploadImages(values: any, img: any): Promise<Object>;
    b64toBlob: (b64Data: any, contentType?: string, sliceSize?: number) => Blob;
    convertToSlug(text: string): string;
    pingServer(values: any): Promise<boolean>;
    pingApi(values: any): Promise<Object>;
    saveNewTask(values: any, payload: any): Promise<Object>;
    createNewProject(createInput: IOrganizationProjectCreateInput, data: any): Promise<IOrganizationProject>;
    createNewContact(input: IOrganizationContactCreateInput, values: any): Promise<IOrganizationContact>;
    updateTask(id: string, taskUpdateInput: ITaskUpdateInput): Promise<IOrganizationContact>;
    statuses(params: ITaskStatusFindInput): Promise<ITaskStatus[]>;
    updateOrganizationTeamEmployee(employeeId: string, values: Partial<IOrganizationTeamEmployee>): Promise<any>;
    getTeams(values?: any): Promise<IOrganizationTeam[]>;
    taskSizes(): Promise<ITaskSize[]>;
    taskPriorities(): Promise<ITaskPriority[]>;
}
//# sourceMappingURL=time-tracker.service.d.ts.map