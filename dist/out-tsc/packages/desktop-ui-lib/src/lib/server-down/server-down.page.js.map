{"version":3,"file":"server-down.page.js","sourceRoot":"","sources":["../../../../../../../packages/desktop-ui-lib/src/lib/server-down/server-down.page.ts"],"names":[],"mappings":";;;;AAAA,wCAAqE;AACrE,4CAAyC;AACzC,0CAA6D;AAC7D,4CAAyC;AACzC,+BAAiC;AAEjC,yDAAqE;AACrE,mDAAuD;AACvD,qFAAgF;AAChF,8CAAuD;AAOhD,IAAM,cAAc,4BAApB,MAAM,cAAc;IAI1B,YACS,KAAY,EACZ,uBAAgD,EACvC,MAAc,EAEd,WAAgB,EAChB,gBAAiC,EACjC,wBAAiD,EACjD,iBAAmC;QAP5C,UAAK,GAAL,KAAK,CAAO;QACZ,4BAAuB,GAAvB,uBAAuB,CAAyB;QACvC,WAAM,GAAN,MAAM,CAAQ;QAEd,gBAAW,GAAX,WAAW,CAAK;QAChB,qBAAgB,GAAhB,gBAAgB,CAAiB;QACjC,6BAAwB,GAAxB,wBAAwB,CAAyB;QACjD,sBAAiB,GAAjB,iBAAiB,CAAkB;QAEpD,IAAI,CAAC,cAAc,GAAG,WAAW,CAAC,kBAAkB,CAAC,CAAC;IACvD,CAAC;IAED,IAAW,WAAW;QACrB,OAAO,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC;IACtC,CAAC;IAEO,eAAe;QACtB,MAAM,GAAG,GAAG,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC;QAE1C,IAAI,CAAC,QAAQ,GAAG,WAAW,CAAC,KAAK,IAAI,EAAE;YACtC,OAAO,CAAC,GAAG,CAAC,wDAAwD,EAAE,GAAG,CAAC,CAAC;YAE3E,MAAM,IAAI,CAAC,uBAAuB,CAAC,qBAAqB,CAAC,GAAG,CAAC,CAAC;YAE9D,OAAO,CAAC,GAAG,CAAC,+CAA+C,EAAE,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC;YAE1F,IAAI,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,KAAK,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE;gBACrE,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gBAC7B,MAAM,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;aACjC;QACF,CAAC,EAAE,IAAI,CAAC,CAAC;IACV,CAAC;IAED,QAAQ;QACP,IAAA,WAAI,EAAC,IAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC,MAAM,CAAC,oBAAoB,CAAC,CAAC;aAClE,IAAI,CACJ,IAAA,UAAG,EAAC,CAAC,QAAuB,EAAE,EAAE;YAC/B,IAAI,CAAC,wBAAwB,CAAC,WAAW,CAAC,QAAQ,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;QAC7E,CAAC,CAAC,EACF,IAAA,8BAAc,EAAC,IAAI,CAAC,CACpB;aACA,SAAS,EAAE,CAAC;QACd,IAAI,CAAC,eAAe,EAAE,CAAC;IACxB,CAAC;IAED,WAAW,KAAU,CAAC;CACtB,CAAA;yBAnDY,cAAc;IAL1B,IAAA,4BAAY,EAAC,EAAE,eAAe,EAAE,IAAI,EAAE,CAAC;IACvC,IAAA,gBAAS,EAAC;QACV,SAAS,EAAE,CAAC,yBAAyB,CAAC;QACtC,WAAW,EAAE,uBAAuB;KACpC,CAAC;IASC,mBAAA,IAAA,aAAM,EAAC,qBAAS,CAAC,CAAA;6CAHH,gBAAK;QACa,kCAAuB;QAC/B,eAAM,UAGI,0BAAe;QACP,mDAAuB;QAC9B,uBAAgB;GAZzC,cAAc,CAmD1B","sourcesContent":["import { Component, Inject, OnDestroy, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { ServerConnectionService, Store } from '../services';\r\nimport { GAUZY_ENV } from '../constants';\r\nimport { from, tap } from 'rxjs';\r\nimport { LanguagesEnum } from '@gauzy/contracts';\r\nimport { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';\r\nimport { ElectronService } from '../electron/services';\r\nimport { LanguageSelectorService } from '../language/language-selector.service';\r\nimport { TranslateService } from '@ngx-translate/core';\r\n\r\n@UntilDestroy({ checkProperties: true })\r\n@Component({\r\n\tstyleUrls: ['./server-down.page.scss'],\r\n\ttemplateUrl: 'server-down.page.html'\r\n})\r\nexport class ServerDownPage implements OnInit, OnDestroy {\r\n\tnoInternetLogo: string;\r\n\tinterval: any;\r\n\r\n\tconstructor(\r\n\t\tprivate store: Store,\r\n\t\tprivate serverConnectionService: ServerConnectionService,\r\n\t\tprivate readonly router: Router,\r\n\t\t@Inject(GAUZY_ENV)\r\n\t\tprivate readonly environment: any,\r\n\t\tprivate readonly _electronService: ElectronService,\r\n\t\tprivate readonly _languageSelectorService: LanguageSelectorService,\r\n\t\tprivate readonly _translateService: TranslateService\r\n\t) {\r\n\t\tthis.noInternetLogo = environment['NO_INTERNET_LOGO'];\r\n\t}\r\n\r\n\tpublic get companySite() {\r\n\t\treturn this.environment.COMPANY_SITE;\r\n\t}\r\n\r\n\tprivate checkConnection() {\r\n\t\tconst url = this.environment.API_BASE_URL;\r\n\r\n\t\tthis.interval = setInterval(async () => {\r\n\t\t\tconsole.log('Checking server connection in checkConnection to URL: ', url);\r\n\r\n\t\t\tawait this.serverConnectionService.checkServerConnection(url);\r\n\r\n\t\t\tconsole.log('Server connection status in checkConnection: ', this.store.serverConnection);\r\n\r\n\t\t\tif (Number(this.store.serverConnection) === 200 || this.store.userId) {\r\n\t\t\t\tclearInterval(this.interval);\r\n\t\t\t\tawait this.router.navigate(['']);\r\n\t\t\t}\r\n\t\t}, 5000);\r\n\t}\r\n\r\n\tngOnInit(): void {\r\n\t\tfrom(this._electronService.ipcRenderer.invoke('PREFERRED_LANGUAGE'))\r\n\t\t\t.pipe(\r\n\t\t\t\ttap((language: LanguagesEnum) => {\r\n\t\t\t\t\tthis._languageSelectorService.setLanguage(language, this._translateService);\r\n\t\t\t\t}),\r\n\t\t\t\tuntilDestroyed(this)\r\n\t\t\t)\r\n\t\t\t.subscribe();\r\n\t\tthis.checkConnection();\r\n\t}\r\n\r\n\tngOnDestroy(): void {}\r\n}\r\n"]}