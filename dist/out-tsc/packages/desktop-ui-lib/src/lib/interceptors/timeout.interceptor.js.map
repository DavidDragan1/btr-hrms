{"version":3,"file":"timeout.interceptor.js","sourceRoot":"","sources":["../../../../../../../packages/desktop-ui-lib/src/lib/interceptors/timeout.interceptor.ts"],"names":[],"mappings":";;;;AAAA;;;GAGG;AACH,wCAAmE;AAOnE,+BAAuD;AACvD,8CAA4C;AAE/B,QAAA,eAAe,GAAG,IAAI,qBAAc,CAAS,gBAAgB,CAAC,CAAC;AAGrE,IAAM,kBAAkB,gCAAxB,MAAM,kBAAkB;IAE9B,YACoC,cAAsB;QAAtB,mBAAc,GAAd,cAAc,CAAQ;IACtD,CAAC;IAEL,SAAS,CAAC,OAA6B,EAAE,IAAiB;QACzD,MAAM,YAAY,GAAG,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,IAAI,IAAI,CAAC,cAAc,CAAC;QACnF,MAAM,MAAM,GAAG,OAAO,CAAC,KAAK,CAAC;YAC5B,UAAU,EAAE,EAAE,mBAAmB,EAAE,GAAG,YAAY,EAAE,EAAE;SACtD,CAAC,CAAC;QACH,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAC9B,IAAA,cAAO,EAAC,YAAY,CAAC,EACrB,IAAA,sBAAU,EAAC,CAAC,KAAK,EAAE,EAAE;YACpB,OAAO,IAAA,iBAAU,EAAC,GAAG,EAAE,CAAC,KAAK,CAAC,CAAC;QAChC,CAAC,CAAC,CACF,CAAC;IACH,CAAC;CACD,CAAA;6BAlBY,kBAAkB;IAD9B,IAAA,iBAAU,GAAE;IAIV,mBAAA,IAAA,aAAM,EAAC,uBAAe,CAAC,CAAA;;GAHb,kBAAkB,CAkB9B","sourcesContent":["/**\r\n * Idea of how to handle timeout is taken from https://gist.github.com/harbirchahal/84d3d7dd1d0838479d298a06b1c51928\r\n * Original code author: Harbir Chahal (https://github.com/harbirchahal)\r\n */\r\nimport { Inject, Injectable, InjectionToken } from '@angular/core';\r\nimport {\r\n\tHttpRequest,\r\n\tHttpHandler,\r\n\tHttpEvent,\r\n\tHttpInterceptor,\r\n} from '@angular/common/http';\r\nimport { Observable, throwError, timeout } from 'rxjs';\r\nimport { catchError } from \"rxjs/operators\";\r\n\r\nexport const DEFAULT_TIMEOUT = new InjectionToken<number>('defaultTimeout');\r\n\r\n@Injectable()\r\nexport class TimeoutInterceptor implements HttpInterceptor {\r\n\r\n\tconstructor(\r\n\t\t@Inject(DEFAULT_TIMEOUT) protected defaultTimeout: number,\r\n\t) { }\r\n\r\n\tintercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\r\n\t\tconst timeoutValue = Number(request.headers.get('timeout')) || this.defaultTimeout;\r\n\t\tconst cloned = request.clone({\r\n\t\t\tsetHeaders: { 'X-Request-Timeout': `${timeoutValue}` }\r\n\t\t});\r\n\t\treturn next.handle(cloned).pipe(\r\n\t\t\ttimeout(timeoutValue),\r\n\t\t\tcatchError((error) => {\r\n\t\t\t\treturn throwError(() => error);\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n}\r\n"]}