{"version":3,"file":"image-viewer.service.js","sourceRoot":"","sources":["../../../../../../../packages/desktop-ui-lib/src/lib/image-viewer/image-viewer.service.ts"],"names":[],"mappings":";;;;AAAA,+CAAkD;AAClD,wCAA2C;AAC3C,gEAAkE;AAClE,+BAA8D;AAC9D,0CAAgD;AAKzC,IAAM,kBAAkB,gCAAxB,MAAM,kBAAkB;IAC9B,YACkB,kBAAqC,EACrC,aAA2B,EAC3B,KAAiB;QAFjB,uBAAkB,GAAlB,kBAAkB,CAAmB;QACrC,kBAAa,GAAb,aAAa,CAAc;QAC3B,UAAK,GAAL,KAAK,CAAY;IAC/B,CAAC;IAEE,MAAM,CAAC,QAAgB;QAC7B,IAAI,CAAC,kBAAkB,CAAC,KAAK,EAAE,CAAC;QAChC,IAAI,MAAM,GAAG,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QACxD,IAAI,CAAC,MAAM,EAAE;YACZ,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,EAAE,EAAE,YAAY,EAAE,MAAM,EAAE,CAAC,CAAC,IAAI,CAC/D,IAAA,gBAAS,EAAC,CAAC,QAAc,EAAE,EAAE,CAC5B,IAAI,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CACrC,EACD,IAAA,kBAAW,EAAC,CAAC,CAAC,CACd,CAAC;YACF,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;SACnD;QACD,OAAO,IAAA,qBAAc,EAAC,MAAM,CAAC,CAAC;IAC/B,CAAC;IAEM,KAAK,CAAC,cAAc,CAAC,GAAW;QACtC,IAAI,MAAM,GAAG,GAAG,CAAC;QACjB,IAAI,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE;YACzB,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAC1C,MAAM,GAAG,MAAM,IAAI,CAAC,qBAAqB,CAAC,UAAU,CAAC,CAAC;SACtD;QACD,OAAO,IAAI,CAAC,aAAa,CAAC,sBAAsB,CAAC,MAAM,CAAC,CAAC;IAC1D,CAAC;IAEM,KAAK,CAAC,qBAAqB,CAAC,KAAc;QAChD,MAAM,GAAG,GAAG,MAAM,KAAK,CAAC,KAAK,CAAC,CAAC;QAC/B,MAAM,IAAI,GAAG,MAAM,GAAG,CAAC,IAAI,EAAE,CAAC;QAC9B,OAAO,MAAM,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,CAAC;IAChD,CAAC;IAEM,KAAK,CAAC,sBAAsB,CAAC,IAAU;QAC7C,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACtC,MAAM,MAAM,GAAG,IAAI,UAAU,EAAE,CAAC;YAChC,MAAM,CAAC,gBAAgB,CACtB,MAAM,EACN;gBACC,OAAO,CAAC,MAAM,CAAC,MAAgB,CAAC,CAAC;YAClC,CAAC,EACD,KAAK,CACL,CAAC;YAEF,MAAM,CAAC,OAAO,GAAG,GAAG,EAAE;gBACrB,OAAO,MAAM,CAAC,IAAI,CAAC,CAAC;YACrB,CAAC,CAAC;YACF,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;QAC5B,CAAC,CAAC,CAAC;IACJ,CAAC;IAEM,UAAU,CAAC,GAAW;QAC5B,IAAI;YACH,MAAM,MAAM,GAAG,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC;YAC5B,OAAO,CAAC,CAAC,MAAM,CAAC;SAChB;QAAC,OAAO,KAAK,EAAE;YACf,OAAO,KAAK,CAAC;SACb;IACF,CAAC;CACD,CAAA;6BA/DY,kBAAkB;IAH9B,IAAA,iBAAU,EAAC;QACX,UAAU,EAAE,MAAM;KAClB,CAAC;6CAGqC,4BAAiB;QACtB,+BAAY;QACpB,iBAAU;GAJvB,kBAAkB,CA+D9B","sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { DomSanitizer, SafeUrl } from '@angular/platform-browser';\r\nimport { shareReplay, firstValueFrom, concatMap } from 'rxjs';\r\nimport { ImageCacheService } from '../services';\r\n\r\n@Injectable({\r\n\tprovidedIn: 'root',\r\n})\r\nexport class ImageViewerService {\r\n\tconstructor(\r\n\t\tprivate readonly _imageCacheService: ImageCacheService,\r\n\t\tprivate readonly _domSanitizer: DomSanitizer,\r\n\t\tprivate readonly _http: HttpClient\r\n\t) { }\r\n\r\n\tpublic source(imageUrl: string): Promise<string> {\r\n\t\tthis._imageCacheService.clear();\r\n\t\tlet image$ = this._imageCacheService.getValue(imageUrl);\r\n\t\tif (!image$) {\r\n\t\t\timage$ = this._http.get(imageUrl, { responseType: 'blob' }).pipe(\r\n\t\t\t\tconcatMap((response: Blob) =>\r\n\t\t\t\t\tthis.getBase64ImageFromBlob(response)\r\n\t\t\t\t),\r\n\t\t\t\tshareReplay(1)\r\n\t\t\t);\r\n\t\t\tthis._imageCacheService.setValue(image$, imageUrl);\r\n\t\t}\r\n\t\treturn firstValueFrom(image$);\r\n\t}\r\n\r\n\tpublic async sanitizeImgUrl(img: string): Promise<SafeUrl> {\r\n\t\tlet imgUrl = img;\r\n\t\tif (this.isValidUrl(img)) {\r\n\t\t\tconst imgTempUrl = await this.source(img);\r\n\t\t\timgUrl = await this.getBase64ImageFromUrl(imgTempUrl);\r\n\t\t}\r\n\t\treturn this._domSanitizer.bypassSecurityTrustUrl(imgUrl);\r\n\t}\r\n\r\n\tpublic async getBase64ImageFromUrl(image?: string): Promise<string> {\r\n\t\tconst res = await fetch(image);\r\n\t\tconst blob = await res.blob();\r\n\t\treturn await this.getBase64ImageFromBlob(blob);\r\n\t}\r\n\r\n\tpublic async getBase64ImageFromBlob(blob: Blob): Promise<string> {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tconst reader = new FileReader();\r\n\t\t\treader.addEventListener(\r\n\t\t\t\t'load',\r\n\t\t\t\tfunction () {\r\n\t\t\t\t\tresolve(reader.result as string);\r\n\t\t\t\t},\r\n\t\t\t\tfalse\r\n\t\t\t);\r\n\r\n\t\t\treader.onerror = () => {\r\n\t\t\t\treturn reject(this);\r\n\t\t\t};\r\n\t\t\treader.readAsDataURL(blob);\r\n\t\t});\r\n\t}\r\n\r\n\tpublic isValidUrl(url: string): boolean {\r\n\t\ttry {\r\n\t\t\tconst imgUrl = new URL(url);\r\n\t\t\treturn !!imgUrl;\r\n\t\t} catch (error) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n}\r\n"]}