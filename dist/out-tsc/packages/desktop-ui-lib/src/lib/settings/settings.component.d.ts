import { OnInit, ElementRef, NgZone, AfterViewInit } from '@angular/core';
import { TimeTrackerService } from '../time-tracker/time-tracker.service';
import { NbDialogService, NbToastrService } from '@nebular/theme';
import { ElectronService } from '../electron/services';
import { BehaviorSubject, Observable } from 'rxjs';
import { SetupService } from '../setup/setup.service';
import { ToastrNotificationService, ZoneEnum } from '../services';
import { AuthStrategy } from '../auth';
import { LanguagesEnum } from '@gauzy/contracts';
import { TranslateService } from '@ngx-translate/core';
import { LanguageSelectorService } from '../language/language-selector.service';
import { DomSanitizer, SafeResourceUrl } from '@angular/platform-browser';
export declare class SettingsComponent implements OnInit, AfterViewInit {
    private electronService;
    private _ngZone;
    private readonly timeTrackerService;
    private toastrService;
    private _dialogService;
    private _setupService;
    private _notifier;
    private _translateService;
    private _languageSelectorService;
    private _authStrategy;
    private readonly _environment;
    private readonly _domSanitizer;
    selectProjectElement: ElementRef;
    set logBox(content: ElementRef);
    logAccordion: any;
    private _logBox;
    private _logContents$;
    get logContents$(): Observable<any[]>;
    set logContents(value: any);
    logIsOpen: boolean;
    private _isRestart$;
    appName: string;
    menus: any[];
    gauzyIcon: SafeResourceUrl;
    private _monitorsOption$;
    thirdPartyConfig: {
        title: string;
        fields: ({
            name: string;
            field: string;
            value: string;
        } | {
            name: string;
            field: string;
            value: number;
        })[];
    }[];
    private _selectedMenu$;
    private get _selectedMenu();
    appSetting: {
        timerStarted: boolean;
        randomScreenshotTime: number;
        trackOnPcSleep: boolean;
        preventDisplaySleep: boolean;
        visibleAwOption: boolean;
        visibleWakatimeOption: boolean;
        preferredLanguage: LanguagesEnum;
        enforced: boolean;
    };
    periodOption: number[];
    selectedPeriod: number;
    screenshotNotification: any;
    config: {
        db: string;
        mysql: {
            dbHost: string;
            dbPort: number;
            dbUsername: string;
            dbPassword: string;
        };
        postgres: {
            dbHost: string;
            dbPort: number;
            dbUsername: string;
            dbPassword: string;
        };
        timeTrackerWindow: any;
        isLocalServer: boolean;
        serverType: any;
        serverUrl: any;
        awPort: any;
        awHost: any;
        port: number;
        portUi: number;
        host: string;
        secureProxy: {
            ssl: {
                key: string;
                cert: string;
            };
            secure: boolean;
            enable: boolean;
        };
        autoStart: boolean;
    };
    version: string;
    message: {
        text: string;
        status: string;
    };
    downloadFinish: boolean;
    progressDownload: number;
    showProgressBar: boolean;
    autoLaunch: any;
    minimizeOnStartup: any;
    authSetting: any;
    currentUser$: BehaviorSubject<any>;
    serverTypes: {
        integrated: string;
        custom: string;
        live: string;
    };
    waitRestart: boolean;
    serverIsRunning: boolean;
    serverOptions: string[];
    driverOptions: string[];
    muted: boolean;
    delayOptions: number[];
    zones: {
        translation: string;
        name: ZoneEnum;
    }[];
    selectedZone: ZoneEnum;
    companyName: string;
    companyLink: string;
    companySite: string;
    private _loading$;
    private _automaticUpdate$;
    private _automaticUpdateDelay$;
    private _available$;
    private _updaterServer$;
    private _file$;
    private _prerelease$;
    private _isCheckDatabase$;
    private _isCheckHost$;
    private _isConnectedDatabase$;
    private _restartDisable$;
    private _isHidden$;
    private _simpleScreenshotNotification$;
    private _timeZoneManager;
    constructor(electronService: ElectronService, _ngZone: NgZone, timeTrackerService: TimeTrackerService, toastrService: NbToastrService, _dialogService: NbDialogService, _setupService: SetupService, _notifier: ToastrNotificationService, _translateService: TranslateService, _languageSelectorService: LanguageSelectorService, _authStrategy: AuthStrategy, _environment: any, _domSanitizer: DomSanitizer);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    mappingAdditionalSetting(values: any): void;
    selectMonitorOption(item: any): void;
    private set _monitorsOption(value);
    selectMenu(menu: any): void;
    updateSetting(value: any, type: string, showNotification?: boolean): void;
    selectPeriod(value: any): void;
    selectZone(value: ZoneEnum): void;
    toggleNotificationChange(value: any): void;
    toggleSimpleNotificationChange(value: any): void;
    toggleNotificationSoundChange(value: boolean): void;
    toggleAutoLaunch(value: any): void;
    toggleMinimizeOnStartup(value: any): void;
    toggleAutoStartOnStartup(value: boolean): void;
    toggleAutomaticUpdate(value: any): void;
    selectAutomaticUpdateDelay(value: any): void;
    togglePrerelease(value: any): void;
    toggleAlwaysOn(value: boolean): void;
    restartApp(): Promise<void>;
    portChange(val: any, type: any): void;
    serverConnectivity(): void;
    checkDatabaseConnectivity(): void;
    checkForUpdate(): void;
    restartAndUpdate(): Promise<void>;
    toggleAwView(value: any): void;
    toggleRandomScreenshot(value: any): void;
    toggleWakatimeView(value: any): void;
    toggleTrackOnPcSleep(value: any): void;
    getUserDetails(): Promise<void>;
    logout(isAfterUpgrade?: boolean): Promise<void>;
    onServerChange(val: any): void;
    onDriverChange(val: any): void;
    showAlert(arg: any): void;
    logBoxChange(e: any): void;
    private scrollToBottom;
    togglePreventDisplaySleep(event: boolean): void;
    openLink(): void;
    get loading$(): Observable<boolean>;
    get available$(): Observable<boolean>;
    get automaticUpdate$(): Observable<boolean>;
    get prerelease$(): Observable<boolean>;
    downloadNow(): void;
    selectDirectory(): void;
    get updaterServer$(): Observable<any>;
    get file$(): Observable<any>;
    toggleGithubDefaultServer(event: boolean): void;
    toggleDigitalOceanDefaultServer(event: boolean): void;
    toggleLocalServer(event: boolean): void;
    get isDesktopTimer(): boolean;
    get isDesktop(): boolean;
    get isServer(): boolean;
    get isServerApi(): boolean;
    get selectedMenu$(): Observable<string>;
    get _isConnectedDatabase(): {
        status: boolean;
        message: string;
    };
    get isConnectedDatabase$(): Observable<{
        status: boolean;
        message: string;
    }>;
    get _isCheckDatabase(): boolean;
    get _isCheckHost(): {
        isLoading: boolean;
        isHidden: boolean;
        message: string;
        status: boolean;
    };
    get isCheckHost$(): Observable<{
        isLoading: boolean;
        isHidden: boolean;
        message: string;
        status: boolean;
    }>;
    get isCheckDatabase$(): Observable<boolean>;
    get restartDisable$(): Observable<boolean>;
    get isHidden$(): Observable<boolean>;
    onHide(): void;
    onHideApi(): void;
    checkHostConnectivity(): Promise<any>;
    onHostChange(host: string): void;
    private get _monitorsOption();
    get monitorsOption$(): Observable<any>;
    humanize(value: number): string;
    get automaticUpdateDelay$(): Observable<number>;
    get simpleScreenshotNotification$(): Observable<boolean>;
    get simpleScreenshotNotification(): boolean;
    get isRestart$(): Observable<boolean>;
    updateSslSetting(value: any): void;
    updateServerConfig(value: any, type: string, showNotification?: boolean): void;
}
//# sourceMappingURL=settings.component.d.ts.map