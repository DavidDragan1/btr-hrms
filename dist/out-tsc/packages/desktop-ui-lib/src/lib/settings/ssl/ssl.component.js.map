{"version":3,"file":"ssl.component.js","sourceRoot":"","sources":["../../../../../../../../packages/desktop-ui-lib/src/lib/settings/ssl/ssl.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, EventEmitter, Input, NgZone, OnInit, Output } from '@angular/core';\r\nimport { ElectronService } from '@gauzy/desktop-ui-lib';\r\nimport { IProxyConfig } from '@gauzy/contracts';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\n\r\ninterface ICheckSslResponse {\r\n\tstatus: boolean;\r\n\tmessage: string;\r\n}\r\n\r\n@Component({\r\n\tselector: 'gauzy-ssl',\r\n\ttemplateUrl: './ssl.component.html',\r\n\tstyleUrls: ['./ssl.component.scss']\r\n})\r\nexport class SslComponent implements OnInit {\r\n\tpublic isCheckSsl$: BehaviorSubject<boolean>;\r\n\tpublic isValid$: BehaviorSubject<ICheckSslResponse>;\r\n\tpublic isHidden$: BehaviorSubject<boolean>;\r\n\tprivate _config: BehaviorSubject<IProxyConfig>;\r\n\r\n\t@Output()\r\n\tpublic update: EventEmitter<IProxyConfig>;\r\n\r\n\tconstructor(private readonly electronService: ElectronService, private readonly ngZone: NgZone) {\r\n\t\tthis.update = new EventEmitter<IProxyConfig>();\r\n\t\tthis.isCheckSsl$ = new BehaviorSubject(false);\r\n\t\tthis.isHidden$ = new BehaviorSubject(true);\r\n\t\tthis.isValid$ = new BehaviorSubject({ status: true, message: '' });\r\n\t\tthis._config = new BehaviorSubject({\r\n\t\t\tssl: {\r\n\t\t\t\tkey: '',\r\n\t\t\t\tcert: ''\r\n\t\t\t},\r\n\t\t\tsecure: true,\r\n\t\t\tenable: false\r\n\t\t});\r\n\t}\r\n\r\n\tngOnInit(): void {\r\n\t\tthis.electronService.ipcRenderer.on('app_setting', (event, { config }) =>\r\n\t\t\tthis.ngZone.run(async () => {\r\n\t\t\t\tthis.config = config?.secureProxy;\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tthis.electronService.ipcRenderer.on('check_ssl', (event, response: ICheckSslResponse) =>\r\n\t\t\tthis.ngZone.run(() => {\r\n\t\t\t\tthis.isValid$.next(response);\r\n\t\t\t\tthis.isHidden$.next(false);\r\n\t\t\t\tthis.isCheckSsl$.next(false);\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n\r\n\tpublic get config(): IProxyConfig {\r\n\t\treturn this._config.getValue();\r\n\t}\r\n\r\n\tpublic get config$(): Observable<IProxyConfig> {\r\n\t\treturn this._config.asObservable();\r\n\t}\r\n\r\n\t@Input()\r\n\tpublic set config(value: IProxyConfig) {\r\n\t\tif (value) {\r\n\t\t\tthis._config.next(value);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic onUpdate(): void {\r\n\t\tthis.update.emit(this.config);\r\n\t}\r\n\r\n\tpublic save(event: string): void {\r\n\t\tthis.electronService.ipcRenderer.send('save_encrypted_file', event);\r\n\t}\r\n\r\n\tpublic checkSsl(): void {\r\n\t\tthis.isCheckSsl$.next(true);\r\n\t\tthis.electronService.ipcRenderer.send('check_ssl');\r\n\t}\r\n\r\n\tpublic onHide(): void {\r\n\t\tthis.isHidden$.next(true);\r\n\t}\r\n}\r\n"]}